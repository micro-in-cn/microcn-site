(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{3193:function(n,s){n.exports={content:["article",["p","Stack 中有专门的 Config 模块负责加载框架与业务配置，支持常见的配置方式，如配置文件、配置中心等，同时支持不同源、不同文件格式之间的数据合并与渲染。"],["h2","特性"],["ul",["li",["p",["strong","动态加载"]," - 动态按时按需从多个资源加载配置。"]],["li",["p",["strong","可插拔"]," - 可选择从任意数量的资源中加载、合并配置，后台资源在内部被抽象成标准格式并通过编码器解码。支持环境变量、参数 flag、文件、etcd、k8s configmap 等等。"]],["li",["p",["strong","合并配置"]," - 假设指定了多个配置源，格式不限，它们会被合并划一。 这样大大简化了配置的优先级与环境的变动。"]],["li",["p",["strong","侦听变动"]," - 可以选择观测指定配置值的变动，支持配置绑定对象。"]],["li",["p",["strong","配置安全"]," - 为了避免某些情况如配置加载失败，可以配置备份指令（默认关闭），框架可以帮助在配置源读取不到时使用该备份文件作为配置项启动。"]]],["h2","快速开始"],["ul",["li",["p",["a",{title:null,href:"#服务配置"},"服务配置"]]],["li",["p",["a",{title:null,href:"#业务配置"},"业务配置"]]],["li",["p",["a",{title:null,href:"#读取配置"},"读取配置"]]],["li",["p",["a",{title:null,href:"#侦听变动"},"侦听变动"]]],["li",["p",["a",{title:null,href:"#本地备份"},"本地备份"]]],["li",["p",["a",{title:null,href:"#使用多数据源"},"使用多数据源"]]]],["h2","服务配置"],["p","Stack 推荐使用 yml 作为配置格式，并且我们定义了标准的框架配置文件：",["a",{title:null,href:"https://github.com/stack-labs/stack-rpc/blob/master/cmd/stack.yml"},["strong","stack.yml"]],"，文件中有详细每个字段的备注。"],["blockquote",["p","yml 结构层次比 JSON、XML、properties 等更加简洁，且支持注释，故而我们推荐 yml。其它常见格式如：JSON、toml 等也是支持的，但需要自行启动时增加--config 指令声明。"]],["p","默认情况下，程序会加载运行目录的",["strong","stack.yml"],"文件："],["pre",{lang:"bash",highlighted:"├── main.go\n└── stack.yml"},["code","├── main.go\n└── stack.yml"]],["p","如果因为团队风格限制，可选择使用启动命令",["strong","config=/path/to/stack.yml"],"指定配置所在位置："],["pre",{lang:null,highlighted:'$ go run main<span class="token punctuation">.</span>go <span class="token operator">-</span><span class="token operator">-</span>config<span class="token operator">=</span><span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>stack<span class="token punctuation">.</span>yml'},["code","$ go run main.go --config=/path/to/stack.yml"]],["p","使用示例：",["a",{title:null,href:"https://github.com/stack-labs/stack-rpc-tutorials/tree/master/examples/config/file"},"StackYmlDemo"]],["p","我们拿纯代码编写应用与配置辅助声明的区别："],["p","纯代码的方式："],["p",["strong","main.go"]],["pre",{lang:"golang",highlighted:'\tservice <span class="token punctuation">:</span><span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\t\tstack<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"stack.rpc.greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        stack<span class="token punctuation">.</span><span class="token function">Address</span><span class="token punctuation">(</span><span class="token string">":8090"</span><span class="token punctuation">)</span>\n\t\tstack<span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span>slogrus<span class="token punctuation">.</span><span class="token function">NewLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n\t<span class="token keyword">if</span> err <span class="token punctuation">:</span><span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">; err != nil {</span>\n\t\tlogger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t}'},["code",'\tservice := stack.NewService(\n\t\tstack.Name("stack.rpc.greeter"),\n        stack.Address(":8090")\n\t\tstack.Logger(slogrus.NewLogger()),\n\t)\n\tservice.Init()\n\n\t// ...\n\n\tif err := service.Run(); err != nil {\n\t\tlogger.Error(err)\n\t}']],["p",'上面的服务声明了服务名为"stack.rpc.greeter"，端口为":8090"，日志引擎为"slogrus"'],["p","如果我们使用配置来辅助，那代码量将会少很多，且灵活性更强，本地调试也更方便："],["p",["strong","main.go"]],["pre",{lang:"golang",highlighted:'\tservice <span class="token punctuation">:</span><span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n\t<span class="token keyword">if</span> err <span class="token punctuation">:</span><span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">; err != nil {</span>\n\t\tlogger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t}'},["code","\tservice := stack.NewService()\n\tservice.Init()\n\n\t// ...\n\n\tif err := service.Run(); err != nil {\n\t\tlogger.Error(err)\n\t}"]],["p","配置为："],["p",["strong","stack.yml"]],["pre",{lang:"yaml",highlighted:'<span class="token key atrule">stack</span><span class="token punctuation">:</span>\n  <span class="token key atrule">server</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> stack.rpc.greeter\n    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token number">8090</span>\n  <span class="token key atrule">logger</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> slogrus'},["code","stack:\n  server:\n    name: stack.rpc.greeter\n    address: :8090\n  logger:\n    name: slogrus"]],["p","通过配置来声明后，服务启动只需要一些模板代码，业务稍作后封装会更少。"],["blockquote",["p","不一定要放到 stack.yml 中，放到其它配置源，也是可以的。"]],["h2","业务配置"],["p","上面我们简单介绍了 Stack 自有属性配置的使用，接下来我们介绍业务配置的接入。"],["p","业务配置的接入主要有下面几种方法："],["ul",["li",["p","在 stack.yml 中 includes"]],["li",["p","通过--config 指定声明配置文件"]],["li",["p","使用 config.Source 加入"]]],["h3","在 stack.yml 中 includes"],["p",["strong","includes"],"属性允许用户在与 stack.yml 同目录下放置其它配置文件"],["p",["strong","stack.yml"]],["pre",{lang:"yaml",highlighted:'<span class="token key atrule">stack</span><span class="token punctuation">:</span>\n  <span class="token key atrule">includes</span><span class="token punctuation">:</span> demoA.yml<span class="token punctuation">,</span> demoB.yml'},["code","stack:\n  includes: demoA.yml, demoB.yml"]],["p",["strong","demoA.yml"]],["pre",{lang:"yaml",highlighted:'<span class="token key atrule">demoA</span><span class="token punctuation">:</span>\n  <span class="token key atrule">aKey</span><span class="token punctuation">:</span> aValue\n  <span class="token key atrule">extra</span><span class="token punctuation">:</span> extraValue'},["code","demoA:\n  aKey: aValue\n  extra: extraValue"]],["p","读取时可如下："],["pre",{lang:"go",highlighted:'\tservice <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"demoA used get: %s"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"includeA"</span><span class="token punctuation">,</span> <span class="token string">"demoA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>'},["code",'\tservice := stack.NewService()\n\tservice.Init()\n\tlog.Infof("demoA used get: %s", config.Get("includeA", "demoA").String(""))']],["p","完整代码参考：",["a",{title:null,href:"https://github.com/stack-labs/stack-rpc-tutorials/blob/master/examples/config/file/stackyml"},"includes"]],["h3","通过--config 指定声明配置文件"],["p","当用户不需要默认的配置文件时，只想加载自己的文件，则可以使用",["strong","--config"],"指令"],["p",["strong","demoA.yml"]],["pre",{lang:"yaml",highlighted:'<span class="token key atrule">demoA</span><span class="token punctuation">:</span>\n  <span class="token key atrule">aKey</span><span class="token punctuation">:</span> aValue\n  <span class="token key atrule">extra</span><span class="token punctuation">:</span> extraValue'},["code","demoA:\n  aKey: aValue\n  extra: extraValue"]],["pre",{lang:"shell",highlighted:'<span class="token variable">$go</span> run main<span class="token punctuation">.</span>go <span class="token operator">-</span><span class="token operator">-</span>config<span class="token operator">=</span>demoA<span class="token punctuation">.</span>yml'},["code","$go run main.go --config=demoA.yml"]],["blockquote",["p","config 指令只接受传入一个文件，不支持多文件"]],["h3","使用 config.Source 加入"],["p",["strong","config.Source"],"是 Stack 中的 API，上述的使用方式本质也是在框架层面调用了这个方法把源加入到",["strong","Config"],"模块。"],["p",["strong","main.go"]],["pre",{lang:"go",highlighted:'\tservice <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\t\tstack<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">NewConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">Source</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">WithPath</span><span class="token punctuation">(</span><span class="token string">"./source.yml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\tlog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"demoA: %s"</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>Source<span class="token punctuation">.</span>DemoA<span class="token punctuation">)</span>'},["code",'\tservice := stack.NewService(\n\t\tstack.Config(config.NewConfig(config.Source(file.NewSource(file.WithPath("./source.yml"))))),\n\t)\n\tservice.Init()\n\n\tlog.Infof("demoA: %s", value.Source.DemoA)']],["p",["strong","source.yml"]],["pre",{lang:"yaml",highlighted:'<span class="token key atrule">source</span><span class="token punctuation">:</span>\n  <span class="token key atrule">demoA</span><span class="token punctuation">:</span> Hello! 我是Demo'},["code","source:\n  demoA: Hello! 我是Demo"]],["p","上面的例子我们假设了用户有一个配置文件叫",["strong","source.yml"],"，并加载它。完成示例参考：",["a",{title:null,href:"https://github.com/stack-labs/stack-rpc-tutorials/tree/master/examples/config/file/source"},"source"]],["h2","读取配置"],["p","读取配置有两种方法"],["ul",["li",["p","绑定注入"]],["li",["p","config.Get"]]],["h3","绑定注入"],["p","Stack 提供了快速绑定对象，并自动渲染的 API-",["strong","config.RegisterOptions"],"与配置标记 Tag（",["strong","sc"],"），方便开发者在应用初始化后直接使用对象的属性，而不需要手动去指定配置 Key。"],["blockquote",["p","sc 的意思为：stack config"]],["p","假设我们有如下业务配置结构，业务名为",["strong","includeA"],"，",["strong","includeB"],"："],["pre",{lang:"yaml",highlighted:'<span class="token key atrule">includeA</span><span class="token punctuation">:</span>\n  <span class="token key atrule">demoA</span><span class="token punctuation">:</span> Hello! 我是DemoA\n<span class="token key atrule">includeB</span><span class="token punctuation">:</span>\n  <span class="token key atrule">demoB</span><span class="token punctuation">:</span> Hello! 我是DemoB'},["code","includeA:\n  demoA: Hello! 我是DemoA\nincludeB:\n  demoB: Hello! 我是DemoB"]],["p","其对应的业务配置结构体则应该如下："],["pre",{lang:"go",highlighted:'<span class="token comment" spellcheck="true">// 配置的具体类型</span>\n<span class="token keyword">type</span> includeA <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tDemoA    <span class="token builtin">string</span>   <span class="token string">`sc:"demoA"`</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> includeB <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tDemoB    <span class="token builtin">string</span>   <span class="token string">`sc:"demoB"`</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment" spellcheck="true">// 声明一个结构，用于接受注入</span>\n<span class="token keyword">type</span> Value <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tIncludeA includeA <span class="token string">`sc:"includeA"`</span>\n\tIncludeB includeB <span class="token string">`sc:"includeB"`</span>\n    <span class="token comment" spellcheck="true">// ...(其它业务结构的配置)</span>\n<span class="token punctuation">}</span>'},["code",'// 配置的具体类型\ntype includeA struct {\n\tDemoA    string   `sc:"demoA"`\n}\ntype includeB struct {\n\tDemoB    string   `sc:"demoB"`\n}\n\n\n// 声明一个结构，用于接受注入\ntype Value struct {\n\tIncludeA includeA `sc:"includeA"`\n\tIncludeB includeB `sc:"includeB"`\n    // ...(其它业务结构的配置)\n}']],["p","我们的读取代码就如下："],["p",["strong","main.go"]],["pre",{lang:"go",highlighted:'    value <span class="token operator">:=</span> Value<span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token comment" spellcheck="true">// 注册该对象，将会动态渲染该对象的值</span>\n    config<span class="token punctuation">.</span><span class="token function">RegisterOptions</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span>\n\tservice <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\tlog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"demoA: %s"</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>IncludeA<span class="token punctuation">.</span>DemoA<span class="token punctuation">)</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"demoB: %s"</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>IncludeA<span class="token punctuation">.</span>IncludeB<span class="token punctuation">.</span>DemoB<span class="token punctuation">)</span>'},["code",'    value := Value{}\n    // 注册该对象，将会动态渲染该对象的值\n    config.RegisterOptions(&value)\n\tservice := stack.NewService()\n\tservice.Init()\n\n\tlog.Infof("demoA: %s", value.IncludeA.DemoA)\n\tlog.Infof("demoB: %s", value.IncludeA.IncludeB.DemoB)']],["p","使用时注意结构体与配置的层级要一一匹配，否则无法渲染注入成功。"],["p",["a",{title:null,href:"https://github.com/stack-labs/stack-rpc-tutorials/tree/master/examples/config/file/stackyml"},"示例参考"]],["h3","config.Get"],["p","我们依旧使用上方的业务定义，如果不想声明一个结构体来接受注入，也可以直接使用 API 读取，如下："],["p",["strong","main.go"]],["pre",{lang:"go",highlighted:'\tlog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"demoA used get: %s"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"includeA"</span><span class="token punctuation">,</span> <span class="token string">"demoA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"这里填写默认值"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>'},["code",'\tlog.Infof("demoA used get: %s", config.Get("includeA", "demoA").String("这里填写默认值"))']],["p",["strong","config.Get"],"支持常见的数据类型与默认值，参数的 Path（Key）找不到值时，那就会使用声明的默认值返回"],["p","支持的类型有："],["pre",{lang:"go",highlighted:'    <span class="token function">Bool</span><span class="token punctuation">(</span>def <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>\n\t<span class="token function">Int</span><span class="token punctuation">(</span>def <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>\n\t<span class="token function">String</span><span class="token punctuation">(</span>def <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>\n\t<span class="token function">Float64</span><span class="token punctuation">(</span>def <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>\n\t<span class="token function">Duration</span><span class="token punctuation">(</span>def time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> time<span class="token punctuation">.</span>Duration\n\t<span class="token function">StringSlice</span><span class="token punctuation">(</span>def <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>\n\t<span class="token function">StringMap</span><span class="token punctuation">(</span>def <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>\n\t<span class="token function">Scan</span><span class="token punctuation">(</span>val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n\t<span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>'},["code","    Bool(def bool) bool\n\tInt(def int) int\n\tString(def string) string\n\tFloat64(def float64) float64\n\tDuration(def time.Duration) time.Duration\n\tStringSlice(def []string) []string\n\tStringMap(def map[string]string) map[string]string\n\tScan(val interface{}) error\n\tBytes() []byte"]],["h2","侦听变动"],["h2","本地备份"],["h2","使用多数据源"],["h2","支持的配置源"],["p","-> 示例跟进中"],["ul",["li",["p","文件 ",["a",{title:null,href:"https://github.com/stack-labs/stack-rpc-tutorials/tree/master/examples/config/file"},"示例"]]],["li",["p","配置中心"],["ul",["li",["p","xconf"]],["li",["p","apollo ",["a",{title:null,href:"https://github.com/stack-labs/stack-rpc-tutorials/tree/master/examples/config/apollo"},"示例"]]],["li",["p","stack"]],["li",["p","etcd"]],["li",["p","consul"]]]]]],meta:{order:11,title:"配置[编写中]",filename:"docs/stack-rpc/config.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#特性",title:"特性"},"特性"]],["li",["a",{className:"bisheng-toc-h2",href:"#快速开始",title:"快速开始"},"快速开始"]],["li",["a",{className:"bisheng-toc-h2",href:"#服务配置",title:"服务配置"},"服务配置"]],["li",["a",{className:"bisheng-toc-h2",href:"#业务配置",title:"业务配置"},"业务配置"]],["li",["a",{className:"bisheng-toc-h2",href:"#读取配置",title:"读取配置"},"读取配置"]],["li",["a",{className:"bisheng-toc-h2",href:"#侦听变动",title:"侦听变动"},"侦听变动"]],["li",["a",{className:"bisheng-toc-h2",href:"#本地备份",title:"本地备份"},"本地备份"]],["li",["a",{className:"bisheng-toc-h2",href:"#使用多数据源",title:"使用多数据源"},"使用多数据源"]],["li",["a",{className:"bisheng-toc-h2",href:"#支持的配置源",title:"支持的配置源"},"支持的配置源"]]]}}}]);