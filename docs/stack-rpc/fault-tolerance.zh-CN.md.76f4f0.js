(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{3197:function(n,s){n.exports={content:["article",["p","分布式系统世界中，随时随地都可能会出现异常。Micro 在定位这个问题时，对容错作出了许多最好的尝试。这篇文档介绍一些可配置的容错方式。"],["h2","心跳（Heartbeating）"],["p","心跳是服务发现中，刷新服务的注册状态的机制。"],["h3","原理"],["p","服务通过服务发现功能，在启动时进行服务注册，关闭时进行服务卸载。有时候这些服务可能会异常挂掉，进程可能会被杀掉，可能遇到短暂的网络问题。这种情况下，节点会在服务发现中被干掉。理想状态是服务会被自动移除。"],["h3","解决方案"],["p","为了解决这个问题，Micro 注册机制支持通过 TTL（Time-To-Live）和间隔时间注册两种方式。TTL 指定一次注册在注册中心的有效期，过期后便删除，而间隔时间注册则是定时向注册中心重新注册以保证服务仍在线。"],["p","这两个方式在 go-micro 中都可以选项或 micro 命令 flag 的方式指定。"],["h3","使用方法"],["p","如果是命令行的方式，则可以方便使用内置的 flag 设置 ttl 值、间隔时间"],["pre",{lang:null,highlighted:'micro <span class="token operator">-</span><span class="token operator">-</span>register_ttl<span class="token operator">=</span><span class="token number">30</span> <span class="token operator">-</span><span class="token operator">-</span>register_interval<span class="token operator">=</span><span class="token number">15</span> api'},["code","micro --register_ttl=30 --register_interval=15 api"]],["p","刚这个例子我们设置了 30 秒的 TTL 生存期，并设置了每 15 秒一次的重注册。"],["p","而对于使用 go-micro 机制，可以以在构造服务时把选项传进去，比如 time.Duration","*","n"],["pre",{lang:null,highlighted:'service <span class="token punctuation">:</span><span class="token operator">=</span> micro<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n        micro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"com.example.srv.foo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        micro<span class="token punctuation">.</span><span class="token function">RegisterTTL</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        micro<span class="token punctuation">.</span><span class="token function">RegisterInterval</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>'},["code",'service := micro.NewService(\n        micro.Name("com.example.srv.foo"),\n        micro.RegisterTTL(time.Second*30),\n        micro.RegisterInterval(time.Second*15),\n)']],["h2","负载均衡"],["p","负载均衡是一种将请求摊开负载或者维持高可用的方式。"],["h3","原理"],["p","对于一些单线程的应用来说，高可用和弹性能力非常有限。当应用因某种原因宕掉这宾便不能再提供服务。当有足够多的请求负载到这台服务上时，那它可能会响应得很慢或者不会响应全部请求。而把所有请求分发来多台应用的副本能很好解决这个问题。"],["h3","解决方案"],["p","微服务客户端通过",["a",{title:null,href:"https://pkg.go.dev/github.com/micro/go-micro/v2/selector#Selector"},"选择器"],"负载均衡，选择器可以把请求分到任意多的服务节点上。服务启动后，它使用唯一的地址与 id 组合向注册中心注册成服务节点。创建请求时，micro 客户端会通过选择器决定向哪一个节点发送请求。选择器在服务注册信息中找到服务的节点，然后用负载均衡策略选择一个节点把请求发送出去，比如随机哈希、轮询。"],["h3","使用方式"],["p","客户端负载均衡内置在",["code","go-micro"],"客户端中，这是自动完成的。"],["h2","重试"],["p","重试是指请求不成功时再次请求的方法。"],["h3","原理"],["p","请求可能会因为某种原因失败，网络、负载、宕机等等，理想情况是，在发生这些事后，我们仍能能把请求重新发到程序的另一个节点并收到成功的响应。"],["h3","解决方案"],["p","micro 客户端内置有重试机制。选择器（上面有提到）会返回一个叫 Next 的函数，这个函数在执行时会基于负载均衡策略从服务列表中返回一个节点。Next 函数可以执行多次，基于负载均衡策略返回新的节点。如果重试有设置，在请求失败时，Next 函数便会执行并把请求发向另一个新的节点。"],["h3","使用方式"],["p","重置可以通过命令行标记或代码选项在客户端传入。默认值是 1，也即是一次请求尝试一回。"],["p","通过命令行 flag 传入"],["pre",{lang:null,highlighted:'micro <span class="token operator">-</span><span class="token operator">-</span>client_retries<span class="token operator">=</span><span class="token number">3</span>'},["code","micro --client_retries=3"]],["p","设置选项"],["pre",{lang:null,highlighted:'client<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>\n\tclient<span class="token punctuation">.</span><span class="token function">Retries</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>'},["code","client.Init(\n\tclient.Retries(3),\n)"]],["h2","服务发现缓存"],["p","服务发现缓存是指在客户端缓存服务发现的信息。"],["h3","原理"],["p","服务发现是微服务的核心，但是如果架构设计不对，它也会变成故障节点。每种发现系统都有它自己的弹性与高可用属性。当发生发现机制无法使用的事故，这会导致剩下的系统都不可用，那么服务也都无法判断如何解析服务名与地址。而如果每次请求都要到中心服务节点查找对于服务发现也是个瓶颈。"],["h3","解决方案"],["p","客户端进行缓存可以消除服务发现作为中心的性能瓶颈及故障节点失效的问题。Micro 包含有选择器（客户端负载均衡器），它在缓存中维护了服务发现的信息。如果缓存没有找到，选择器会到注册服务中心去查找并把结果缓存起来。缓存也会设置 TTL 定期调整，以确保过期的数据不再生效。"],["h3","使用方式"],["p","selector 缓存可以使用命令行参数或创建服务时指定"],["p","命令行的方式"],["pre",{lang:null,highlighted:'micro <span class="token operator">-</span><span class="token operator">-</span>selector<span class="token operator">=</span>cache api'},["code","micro --selector=cache api"]],["p","如果要调用 Init 方法，Go-micro 服务也支持使用同样的命令行 flag 来传递该参数："],["pre",{lang:null,highlighted:'import <span class="token punctuation">(</span>\n\t<span class="token string">"github.com/micro/go-micro/v2/client"</span>\n\t<span class="token string">"github.com/micro/go-micro/v2/selector/cache"</span>\n<span class="token punctuation">)</span>\n\nservice <span class="token punctuation">:</span><span class="token operator">=</span> micro<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"com.example.srv.foo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\nservice<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">NewSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>'},["code",'import (\n\t"github.com/micro/go-micro/v2/client"\n\t"github.com/micro/go-micro/v2/selector/cache"\n)\n\nservice := micro.NewService(\n\tmicro.Name("com.example.srv.foo"),\n)\n\nservice.Client().Init(cache.NewSelector())']]],meta:{order:10,title:"容错",filename:"docs/stack-rpc/fault-tolerance.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#心跳（Heartbeating）",title:"心跳（Heartbeating）"},"心跳（Heartbeating）"]],["li",["a",{className:"bisheng-toc-h2",href:"#负载均衡",title:"负载均衡"},"负载均衡"]],["li",["a",{className:"bisheng-toc-h2",href:"#重试",title:"重试"},"重试"]],["li",["a",{className:"bisheng-toc-h2",href:"#服务发现缓存",title:"服务发现缓存"},"服务发现缓存"]]]}}}]);