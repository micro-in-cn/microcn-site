(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{3199:function(n,s){n.exports={content:["article",["blockquote",["p","在开始使用之前，我们建议读者对 Golang、微服务及 RPC 要有一定的理解。"]],["h2","依赖"],["p","环境依赖参考：",["a",{title:null,href:"https://stacklabs.cn/docs/stack-rpc/prepare-env-cn"},"环境准备工作"]],["h2","新建项目"],["pre",{lang:"bash",highlighted:'$ <span class="token function">mkdir</span> stack-demo <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> stack-demo\n$ go mod init stacklabs.cn/stack-rpc/stack-demo'},["code","$ mkdir stack-demo && cd stack-demo\n$ go mod init stacklabs.cn/stack-rpc/stack-demo"]],["p","StackRPC 目前还没有脚手架):"],["h2","安装 Stack-RPC"],["pre",{lang:"bash",highlighted:"$ go get github.com/stack-labs/stack-rpc"},["code","$ go get github.com/stack-labs/stack-rpc"]],["h2","编写服务"],["p","我们写一个简单的问候（greeter）程序作为示例。"],["p","例子可参考：",["a",{title:null,href:"https://github.com/stack-labs/stack-rpc-tutorials/tree/master/examples/service/rpc"},"examples/service"],"."],["h3","服务原型"],["p","微服务中有个关键需求点，就是接口的强定义。Stack 使用 protobuf 来完成这个需求。"],["p","下面我们定义 Greeter 问候服务接口，它有一个 Hello 方法，及方法的入参 HelloRequest 及出参 HelloResponse，两个对象都有一个字符串类型的参数。"],["pre",{lang:"proto",highlighted:'syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token comment" spellcheck="true">;</span>\n\nservice Greeter {\n\trpc <span class="token function">Hello</span><span class="token punctuation">(</span>HelloRequest<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>HelloResponse<span class="token punctuation">)</span> {}\n}\n\nmessage HelloRequest {\n\tstring name <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n}\n\nmessage HelloResponse {\n\tstring greeting <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">;</span>\n}'},["code",'syntax = "proto3";\n\nservice Greeter {\n\trpc Hello(HelloRequest) returns (HelloResponse) {}\n}\n\nmessage HelloRequest {\n\tstring name = 1;\n}\n\nmessage HelloResponse {\n\tstring greeting = 2;\n}']],["p","我们创建一个",["strong","proto/greeter"],"目录并在其下生成",["strong","greeter.proto"],"文件，然把上面的内容贴到该文件中。"],["pre",{lang:"bash",highlighted:'$ <span class="token function">mkdir</span> -p proto/greeter <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> proto/greeter\n<span class="token comment" spellcheck="true"># 或使用其它编辑器创建并编辑</span>\n$ vim greeter.proto'},["code","$ mkdir -p proto/greeter && cd proto/greeter\n# 或使用其它编辑器创建并编辑\n$ vim greeter.proto"]],["h3","生成原型"],["p","在定义好原型后我们得使用 protoc 及 stack_out 指令 的插件编译它，Stack 插件可以帮助生成 Stack-RPC 需要的原型文件"],["pre",{lang:"shell",highlighted:'$ protoc <span class="token operator">-</span><span class="token operator">-</span>proto_path<span class="token operator">=</span><span class="token variable">$GOPATH</span><span class="token operator">/</span>src<span class="token punctuation">:</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token operator">-</span>stack_out<span class="token operator">=</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token operator">-</span>go_out<span class="token operator">=</span><span class="token punctuation">.</span> greeter<span class="token punctuation">.</span>proto'},["code","$ protoc --proto_path=$GOPATH/src:. --stack_out=. --go_out=. greeter.proto"]],["p","我们可以看到在 proto 目录中生成了如下文件"],["pre",{lang:"text",highlighted:'└── proto\n    └── greeter\n        ├── greeter<span class="token punctuation">.</span>pb<span class="token punctuation">.</span>go       # 接口声明文件\n        ├── greeter<span class="token punctuation">.</span>pb<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>go # Stack服务声明文件\n        └── greeter<span class="token punctuation">.</span>proto       # 原型'},["code","└── proto\n    └── greeter\n        ├── greeter.pb.go       # 接口声明文件\n        ├── greeter.pb.stack.go # Stack服务声明文件\n        └── greeter.proto       # 原型"]],["h3","编写服务"],["p","下方的代码开始编写 greeter 服务的代码"],["p","它要实现下面的几个要求"],["ol",["li",["p","实现在 Greeter Handler 中定义的接口。"]],["li",["p","初始化 stack.Service"]],["li",["p","注册 Greeter handler"]],["li",["p","运行服务"]]],["pre",{lang:"bash",highlighted:'<span class="token comment" spellcheck="true"># 回到主目录，创建server目录并创建main.go</span>\n$ vim server/main.go\n<span class="token comment" spellcheck="true"># 代码结构如下</span>\n└── proto\n    └── greeter\n        ├── greeter.pb.go       <span class="token comment" spellcheck="true"># 接口声明文件</span>\n        ├── greeter.pb.stack.go <span class="token comment" spellcheck="true"># Stack服务声明文件</span>\n        └── greeter.proto       <span class="token comment" spellcheck="true"># 原型</span>\n└── server\n    └── main.go'},["code","# 回到主目录，创建server目录并创建main.go\n$ vim server/main.go\n# 代码结构如下\n└── proto\n    └── greeter\n        ├── greeter.pb.go       # 接口声明文件\n        ├── greeter.pb.stack.go # Stack服务声明文件\n        └── greeter.proto       # 原型\n└── server\n    └── main.go"]],["p","将代码贴到",["strong","server/main.go"],"中"],["pre",{lang:"go",highlighted:'<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"context"</span>\n\n\t<span class="token string">"github.com/stack-labs/stack-rpc"</span>\n\tproto <span class="token string">"github.com/stack-labs/stack-rpc-tutorials/examples/proto/service/rpc"</span>\n\t<span class="token string">"github.com/stack-labs/stack-rpc/logger"</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment" spellcheck="true">// 服务类</span>\n<span class="token keyword">type</span> Greeter <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// 实现proto中的Hello接口</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>g Greeter<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">,</span> rsp <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelloResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\trsp<span class="token punctuation">.</span>Greeting <span class="token operator">=</span> <span class="token string">"Hello! "</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>Name\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// 实例化服务，并命名为stack.rpc.greeter</span>\n\tservice <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\t\tstack<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"stack.rpc.greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n\t<span class="token comment" spellcheck="true">// 初始化服务</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 将Greeter接口注册到服务上</span>\n\tproto<span class="token punctuation">.</span><span class="token function">RegisterGreeterHandler</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>Greeter<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 运行服务</span>\n\t<span class="token keyword">if</span> err <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tlogger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>'},["code",'package main\n\nimport (\n\t"context"\n\n\t"github.com/stack-labs/stack-rpc"\n\tproto "github.com/stack-labs/stack-rpc-tutorials/examples/proto/service/rpc"\n\t"github.com/stack-labs/stack-rpc/logger"\n)\n\n// 服务类\ntype Greeter struct {\n}\n\n// 实现proto中的Hello接口\nfunc (g Greeter) Hello(ctx context.Context, req *proto.HelloRequest, rsp *proto.HelloResponse) error {\n\trsp.Greeting = "Hello! " + req.Name\n\treturn nil\n}\n\nfunc main() {\n\t// 实例化服务，并命名为stack.rpc.greeter\n\tservice := stack.NewService(\n\t\tstack.Name("stack.rpc.greeter"),\n\t)\n\t// 初始化服务\n\tservice.Init()\n\n\t// 将Greeter接口注册到服务上\n\tproto.RegisterGreeterHandler(service.Server(), new(Greeter))\n\n\t// 运行服务\n\tif err := service.Run(); err != nil {\n\t\tlogger.Error(err)\n\t}\n}']],["h3","运行服务"],["pre",{lang:null,highlighted:'go run server<span class="token operator">/</span>main<span class="token punctuation">.</span>go'},["code","go run server/main.go"]],["p","输出"],["pre",{lang:null,highlighted:'<span class="token number">2020</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">04.284527</span> I | Transport <span class="token punctuation">[</span>http<span class="token punctuation">]</span> Listening on <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">50783</span>\n<span class="token number">2020</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">04.284592</span> I | Broker <span class="token punctuation">[</span>http<span class="token punctuation">]</span> Connected <span class="token keyword">to</span> <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">50784</span>\n<span class="token number">2020</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">04.284851</span> I | Registry <span class="token punctuation">[</span>mdns<span class="token punctuation">]</span> Registering node<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>greeter<span class="token operator">-</span>e6d90337<span class="token operator">-</span><span class="token number">1638</span><span class="token operator">-</span><span class="token number">49e7</span><span class="token operator">-</span><span class="token number">9084</span><span class="token operator">-</span>c927517dee7e'},["code","2020-11-25 00:38:04.284527 I | Transport [http] Listening on [::]:50783\n2020-11-25 00:38:04.284592 I | Broker [http] Connected to [::]:50784\n2020-11-25 00:38:04.284851 I | Registry [mdns] Registering node: stack.rpc.greeter-e6d90337-1638-49e7-9084-c927517dee7e"]],["blockquote",["p","以上输出根据运行环境有所差异"]],["h3","定义客户端"],["p","下面的客户端代码用来调用",["strong","greeter"],"服务。上面我们生成的 proto 原型文件中包含了客户端部分，相当于一个模块，这样可以减少代码量。"],["pre",{lang:null,highlighted:'# 回到主目录，创建client目录并创建main<span class="token punctuation">.</span>go\n$ vim client<span class="token operator">/</span>main<span class="token punctuation">.</span>go\n# 代码结构如下\n└── proto\n    └── greeter\n        ├── greeter<span class="token punctuation">.</span>pb<span class="token punctuation">.</span>go       # 接口声明文件\n        ├── greeter<span class="token punctuation">.</span>pb<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>go # Stack服务声明文件\n        └── greeter<span class="token punctuation">.</span>proto       # 原型\n└── server\n    └── main<span class="token punctuation">.</span>go\n└── client\n    └── main<span class="token punctuation">.</span>go'},["code","# 回到主目录，创建client目录并创建main.go\n$ vim client/main.go\n# 代码结构如下\n└── proto\n    └── greeter\n        ├── greeter.pb.go       # 接口声明文件\n        ├── greeter.pb.stack.go # Stack服务声明文件\n        └── greeter.proto       # 原型\n└── server\n    └── main.go\n└── client\n    └── main.go"]],["p","将下方代码贴到",["strong","client/main.go"],"中"],["pre",{lang:"go",highlighted:'<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"context"</span>\n\n\t<span class="token string">"github.com/stack-labs/stack-rpc"</span>\n\tproto <span class="token string">"github.com/stack-labs/stack-rpc-tutorials/examples/proto/service/rpc"</span>\n\t<span class="token string">"github.com/stack-labs/stack-rpc/logger"</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// 定义服务，可以传入其它可选参数</span>\n\tservice <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"stack.rpc.client"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 创建客户端</span>\n\tgreeter <span class="token operator">:=</span> proto<span class="token punctuation">.</span><span class="token function">NewGreeterService</span><span class="token punctuation">(</span><span class="token string">"stack.rpc.greeter"</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 调用greeter服务</span>\n\trsp<span class="token punctuation">,</span> err <span class="token operator">:=</span> greeter<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>proto<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"StackLabs"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tlogger<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment" spellcheck="true">// 打印响应结果</span>\n\tlogger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>rsp<span class="token punctuation">.</span>Greeting<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'package main\n\nimport (\n\t"context"\n\n\t"github.com/stack-labs/stack-rpc"\n\tproto "github.com/stack-labs/stack-rpc-tutorials/examples/proto/service/rpc"\n\t"github.com/stack-labs/stack-rpc/logger"\n)\n\nfunc main() {\n\t// 定义服务，可以传入其它可选参数\n\tservice := stack.NewService(stack.Name("stack.rpc.client"))\n\tservice.Init()\n\n\t// 创建客户端\n\tgreeter := proto.NewGreeterService("stack.rpc.greeter", service.Client())\n\n\t// 调用greeter服务\n\trsp, err := greeter.Hello(context.TODO(), &proto.HelloRequest{Name: "StackLabs"})\n\tif err != nil {\n\t\tlogger.Fatal(err)\n\t\treturn\n\t}\n\n\t// 打印响应结果\n\tlogger.Info(rsp.Greeting)\n}']],["h3","运行客户端"],["pre",{lang:"bash",highlighted:"go run client/main.go"},["code","go run client/main.go"]],["p","输出"],["pre",{lang:null,highlighted:'<span class="token number">2020</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">17</span>  file<span class="token operator">=</span>client<span class="token operator">/</span>main<span class="token punctuation">.</span>go<span class="token punctuation">:</span><span class="token number">27</span> level<span class="token operator">=</span>info Hello! StackLabs'},["code","2020-11-25 00:41:17  file=client/main.go:27 level=info Hello! StackLabs"]],["p","是不是很简单！"],["p","我们演示了如何基于 StackRPC 来编写一个简单的微服务。但上面的过程隐藏了微服务服务启动、请求处理等的很多关键细节，比如服务的注册、日志库加载、服务发现、请求均衡等等，这些都封装在了 StackRPC 库里。"]],meta:{order:6,title:"快速上手",filename:"docs/stack-rpc/getting-starter.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#依赖",title:"依赖"},"依赖"]],["li",["a",{className:"bisheng-toc-h2",href:"#新建项目",title:"新建项目"},"新建项目"]],["li",["a",{className:"bisheng-toc-h2",href:"#安装-Stack-RPC",title:"安装 Stack-RPC"},"安装 Stack-RPC"]],["li",["a",{className:"bisheng-toc-h2",href:"#编写服务",title:"编写服务"},"编写服务"]]]}}}]);