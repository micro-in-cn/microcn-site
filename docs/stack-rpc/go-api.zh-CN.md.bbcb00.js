(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{3198:function(e,l){e.exports={content:["section",["p","Go API 是基于服务发现驱动开发的可插拔 API 框架，旨在帮助构建强大的 API 网关。"],["h2","概览"],["p","Go API 支持网关路由。微服务架构是把应用解耦成逻辑上的相对隔离的服务，API 网关提供单一的入口把服务的 API 统一起来。Go API 使用服务发现中定义的元数据来生成路由规则并提供与之对应的 http 服务。"],["p",["img",{src:"https://micro.mu/docs/images/go-api.png?v=1",alt:"Go API"}]],["p","运行时工具",["a",{title:null,href:"https://micro.mu/docs/cn/api.html"},"micro api"],"便是基于 Go API 构建。"],["h2","Handler 处理器"],["p","Handler 专门用于接收并处理 HTTP 请求，为了方便，handler 使用服务方法",["code","http.Handler"],"的名字来路由。"],["p",["strong","micro api"],"支持以下类型的网关转发"],["ul",["li",["p",["a",{title:null,href:"#api-handler"},["code","api"]]," - http 转 RPC 请求"]],["li",["p",["a",{title:null,href:"#broker-handler"},["code","broker"]]," - pub/sub 异步请求"]],["li",["p",["a",{title:null,href:"#cloudevents-handler"},["code","cloudevents"]]," - 专门处理",["a",{title:null,href:"https://github.com/cloudevents/spec"},"CloudEvent"],"事件，并向消息总线分发消息"]],["li",["p",["a",{title:null,href:"#event-handler"},["code","event"]]," - 处理任意的 http 请求并向消息总线分发消息。"]],["li",["p",["a",{title:null,href:"#http-handler"},["code","http"]]," - 处理 http 请求并转向反向代理。"]],["li",["p",["a",{title:null,href:"#registry-handler"},["code","registry"]]," - http 注册"]],["li",["p",["a",{title:null,href:"#rpc-handler"},["code","rpc"]]," - 处理 json 及 protobuf 格式的 POST 请求，并转向 RPC。"]],["li",["p",["a",{title:null,href:"#web-handler"},["code","web"]]," - 包含 web socket 的 http 反向代理。"]]]],meta:{order:12,title:"Go API",filename:"docs/stack-rpc/go-api.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#概览",title:"概览"},"概览"]],["li",["a",{className:"bisheng-toc-h2",href:"#Handler-处理器",title:"Handler 处理器"},"Handler 处理器"]],["li",["a",{className:"bisheng-toc-h2",href:"#API-Handler",title:"API Handler"},"API Handler"]],["li",["a",{className:"bisheng-toc-h2",href:"#Broker-Handler",title:"Broker Handler"},"Broker Handler"]],["li",["a",{className:"bisheng-toc-h2",href:"#CloudEvents-Handler",title:"CloudEvents Handler"},"CloudEvents Handler"]],["li",["a",{className:"bisheng-toc-h2",href:"#Event-Handler",title:"Event Handler"},"Event Handler"]],["li",["a",{className:"bisheng-toc-h2",href:"#HTTP-Handler",title:"HTTP Handler"},"HTTP Handler"]],["li",["a",{className:"bisheng-toc-h2",href:"#Registry-Handler",title:"Registry Handler"},"Registry Handler"]],["li",["a",{className:"bisheng-toc-h2",href:"#RPC-Handler",title:"RPC Handler"},"RPC Handler"]],["li",["a",{className:"bisheng-toc-h2",href:"#Web-Handler",title:"Web Handler"},"Web Handler"]]],api:["section",["h2","API Handler"],["p","API Handler 是默认的处理器，负责把内部的 RPC 服务对外暴露成 http 接口，它接收并处理 http 请求，再转成 RPC 请求转向具体服务，最后返回 RPC 服务的响应结果。"],["ul",["li",["p","Content-Type: 所有类型"]],["li",["p","Body: 任务类型"]],["li",["p","Forward Format: ",["a",{title:null,href:"https://github.com/micro/go-micro/blob/master/api/proto/api.proto#L11"},"api.Request"],"/",["a",{title:null,href:"https://github.com/micro/go-micro/blob/master/api/proto/api.proto#L21"},"api.Response"]]],["li",["p","Path: ",["code","/[service]/[method]"]]],["li",["p","Resolver: 请求解析器，路径会被解析成服务与方法"]]],["h2","Broker Handler"],["p","broker handler Pub/Sub 订阅分发处理器，将内部的 Pub/Sub 服务接口对外暴露成 Http 接口，接收 http 请求，并根据参数指向的主题发送消息。"],["ul",["li",["p","Content-Type: Any"]],["li",["p","Body: Any"]],["li",["p","Forward Format: HTTP"]],["li",["p","Path: ",["code","/"]]],["li",["p","Resolver: 订阅主题通过 query 请求参数指定"]]],["h2","CloudEvents Handler"],["p","云事件处理器提供 HTTP 入口，并把收到的请求转成",["a",{title:null,href:"https://github.com/cloudevents/spec"},"CloudEvent"],"消息通过消息总线的",["code","go-micro/client.Publish"],"方法传出去。"],["ul",["li",["p","Content-Type: Any"]],["li",["p","Body: Any"]],["li",["p","Forward Format: 请求会按照",["a",{title:null,href:"https://github.com/cloudevents/spec"},"CloudEvents"],"格式化"]],["li",["p","Path: ",["code","/[topic]"]]],["li",["p","Resolver: 请求路径会用来解析主题"]]],["h2","Event Handler"],["p","事件处理器提供 HTTP 入口，把请求转成消息调用",["code","go-micro/client.Publish"],"方法通过消息总线发送出去。"],["ul",["li",["p","Content-Type: Any"]],["li",["p","Body: Any"]],["li",["p","Forward Format: 请求会按照",["a",{title:null,href:"https://github.com/micro/go-api/blob/master/proto/api.proto#L28L39"},"go-api/proto.Event"],"格式化"]],["li",["p","Path: ",["code","/[topic]/[event]"],"（可以看到与 CloudEvents 的不同）"]],["li",["p","Resolver: 请求路径会用来解析主题及事件名"]]],["h2","HTTP Handler"],["p","Http 处理器是 HTTP 的反向代理，其内置有服务发现。"],["ul",["li",["p","Content-Type: Any"]],["li",["p","Body: Any"]],["li",["p","Forward Format: 反向代理"]],["li",["p","Path: ",["code","/[service]"]]],["li",["p","Resolver: 请求路径会用来解析服务名"]]],["h2","Registry Handler"],["p","注册处理器接收 HTTP 请求，它负责 go-micro 的注册接口请求"],["ul",["li",["p","Content-Type: Any"]],["li",["p","Body: JSON"]],["li",["p","Forward Format: HTTP"]],["li",["p","Path: ",["code","/"]]],["li",["p","Resolver: 获取服务，注册与卸载服务分别通过 GET, POST, DELETE 请求处理。"]]],["h2","RPC Handler"],["p","RPC 处理器接收 JSON 或 protobuf 的 HTTP 请求，并转成 RPC 请求向前转发。"],["ul",["li",["p","Content-Type: ",["code","application/json"]," or ",["code","application/protobuf"]]],["li",["p","Body: JSON 或者 Protobuf"]],["li",["p","Forward Format: json-rpc 或 proto-rpc，根据请求内容决定"]],["li",["p","Path: ",["code","/[service]/[method]"]]],["li",["p","Resolver: 请求路径会用来解析服务名与方法名"]]],["h2","Web Handler"],["p","web 处理器职责是反向代理，它内置服务发现，并支持 web socket。"],["ul",["li",["p","Content-Type: Any"]],["li",["p","Body: Any"]],["li",["p","Forward Format: 反向代理且支持 web socket"]],["li",["p","Path: ",["code","/[service]"]]],["li",["p","Resolver: 请求路径会用来解析服务名"]]]]}}}]);