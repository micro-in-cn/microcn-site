(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{3199:function(n,s){n.exports={content:["article",["p","Go Config 作为配置库，它也是动态的可插拔的。"],["p","大多数的应用配置都是放在静态文件中或者用复杂的逻辑从不同的文件中加载。"],["p","Go-config 就简单得多，可插拔且可合并。"],["h2","特性"],["ul",["li",["p",["strong","动态加载"]," - 动态按时按需从多资源加载配置。Go Config 会在后台监视配置资源，动态在内存中合并、更新。"]],["li",["p",["strong","可插拔资源"]," - 可选择从任意数量的资源中加载、合并配置，后台资源在内部被抽象成标准格式并通过编码器解码。资源可以是环境变量、参数 flag、文件、etcd、k8s configmap 等等。"]],["li",["p",["strong","可合并配置"]," - 假设指定了多个配置源，格式不限，它们会被合并划一。 这样大大简化了配置的优先级与环境的变动。"]],["li",["p",["strong","观察变动"]," - 可以选择观测指定配置值的变动。使用 Go Config 观测器热加载，可以随时查看配置值的变动情况。"]],["li",["p",["strong","安全修复"]," - 某些情况如配置加载失败或者被擦除时，可以指定回退值。这可以保证在发生事故时，我们能读取完整的默认值。"]]],["h2","开始"],["ul",["li",["p",["a",{title:null,href:"#source"},"Source"]," - 后台获取加载的位置"]],["li",["p",["a",{title:null,href:"#encoder"},"Encoder"]," - 负责处理资源配置编码、解码"]],["li",["p",["a",{title:null,href:"#reader"},"Reader"]," - 将多个编码处理后的资源合并成单一的格式"]],["li",["p",["a",{title:null,href:"#config"},"Config"]," - 配置管理器，负责管理多资源"]],["li",["p",["a",{title:null,href:"#usage"},"Usage"]," - go-config 使用示例"]],["li",["p",["a",{title:null,href:"#faq"},"FAQ"]," - 常见问题及回答"]],["li",["p",["a",{title:null,href:"#todo"},"TODO"]," - 将来要开发的任务或特性"]]],["h2","Sources"],["p",["code","Source"],"也即后台加载的配置，同时可以使用多资源。"],["p","支持以下格式："],["ul",["li",["p",["a",{title:null,href:"https://github.com/micro/go-micro/tree/master/config/source/cli"},"cli"]," - read from parsed CLI flags"]],["li",["p",["a",{title:null,href:"https://github.com/micro/go-micro/tree/master/config/source/consul"},"consul"]," - read from consul"]],["li",["p",["a",{title:null,href:"https://github.com/micro/go-micro/tree/master/config/source/env"},"env"]," - read from environment variables"]],["li",["p",["a",{title:null,href:"https://github.com/micro/go-micro/tree/master/config/source/etcd"},"etcd"]," - read from etcd v3"]],["li",["p",["a",{title:null,href:"https://github.com/micro/go-micro/tree/master/config/source/file"},"file"]," - read from file"]],["li",["p",["a",{title:null,href:"https://github.com/micro/go-micro/tree/master/config/source/flag"},"flag"]," - read from flags"]],["li",["p",["a",{title:null,href:"https://github.com/micro/go-micro/tree/master/config/source/memory"},"memory"]," - read from memory"]]],["p","也存在一些社区支持的插件："],["ul",["li",["p",["a",{title:null,href:"https://github.com/micro/go-plugins/tree/master/config/source/configmap"},"configmap"]," - read from k8s configmap"]],["li",["p",["a",{title:null,href:"https://github.com/micro/go-plugins/tree/master/config/source/grpc"},"grpc"]," - read from grpc server"]],["li",["p",["a",{title:null,href:"https://github.com/micro/go-plugins/tree/master/config/source/runtimevar"},"runtimevar"]," - read from Go Cloud Development Kit runtime variable"]],["li",["p",["a",{title:null,href:"https://github.com/micro/go-plugins/tree/master/config/source/url"},"url"]," - read from URL"]],["li",["p",["a",{title:null,href:"https://github.com/micro/go-plugins/tree/master/config/source/vault"},"vault"]," - read from Vault server"]]],["p","TODO:"],["ul",["li",["p","git url"]]],["h3","ChangeSet 变更集"],["p","Sources 以变更集的方式返回配置。对于多个后台配置，变更集是单一的内部抽象。"],["pre",{lang:"go",highlighted:'<span class="token keyword">type</span> ChangeSet <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// Raw encoded config data</span>\n\tData      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\t<span class="token comment" spellcheck="true">// MD5 checksum of the data</span>\n\tChecksum  <span class="token builtin">string</span>\n\t<span class="token comment" spellcheck="true">// Encoding format e.g json, yaml, toml, xml</span>\n\tFormat    <span class="token builtin">string</span>\n\t<span class="token comment" spellcheck="true">// Source of the config e.g file, consul, etcd</span>\n\tSource    <span class="token builtin">string</span>\n\t<span class="token comment" spellcheck="true">// Time of loading or update</span>\n\tTimestamp time<span class="token punctuation">.</span>Time\n<span class="token punctuation">}</span>'},["code","type ChangeSet struct {\n\t// Raw encoded config data\n\tData      []byte\n\t// MD5 checksum of the data\n\tChecksum  string\n\t// Encoding format e.g json, yaml, toml, xml\n\tFormat    string\n\t// Source of the config e.g file, consul, etcd\n\tSource    string\n\t// Time of loading or update\n\tTimestamp time.Time\n}"]],["h2","Encoder"],["p",["code","Encoder"],"负责资源配置编码、解码。后台资源可能会存在不同的格式，编码器负责处理不同的格式，默认的格式是 Json。"],["p","编码器支持以下格式："],["ul",["li",["p","json"]],["li",["p","yaml"]],["li",["p","toml"]],["li",["p","xml"]],["li",["p","hcl"]]],["h2","Reader"],["p",["code","Reader"],"负责把多个 changeset 集合并成一个可查询的值集。"],["pre",{lang:"go",highlighted:'<span class="token keyword">type</span> Reader <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// Merge multiple changeset into a single format</span>\n\t<span class="token function">Merge</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token operator">*</span>source<span class="token punctuation">.</span>ChangeSet<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>source<span class="token punctuation">.</span>ChangeSet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>\n\t<span class="token comment" spellcheck="true">// Return return Go assertable values</span>\n\t<span class="token function">Values</span><span class="token punctuation">(</span><span class="token operator">*</span>source<span class="token punctuation">.</span>ChangeSet<span class="token punctuation">)</span> <span class="token punctuation">(</span>Values<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>\n\t<span class="token comment" spellcheck="true">// Name of the reader e.g a json reader</span>\n\t<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>'},["code","type Reader interface {\n\t// Merge multiple changeset into a single format\n\tMerge(...*source.ChangeSet) (*source.ChangeSet, error)\n\t// Return return Go assertable values\n\tValues(*source.ChangeSet) (Values, error)\n\t// Name of the reader e.g a json reader\n\tString() string\n}"]],["p","Reader 复用 Encoder 编码器将 changeset 集解码成",["code","map[string]interface{}"],"格式，然后将它们合成一个 changeset。它通过格式来确定使用哪个解码器。合成的 changeset 中的",["code","Values"],"可以转成 Go 类型值，而如果有值不能加载时，其中的值也可以作为回退值使用。"],["pre",{lang:"go",highlighted:'<span class="token comment" spellcheck="true">// Values is returned by the reader</span>\n<span class="token keyword">type</span> Values <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// Return raw data</span>\n        <span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n\t<span class="token comment" spellcheck="true">// Retrieve a value</span>\n        <span class="token function">Get</span><span class="token punctuation">(</span>path <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> Value\n\t<span class="token comment" spellcheck="true">// Return values as a map</span>\n        <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\t<span class="token comment" spellcheck="true">// Scan config into a Go type</span>\n        <span class="token function">Scan</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n<span class="token punctuation">}</span>'},["code","// Values is returned by the reader\ntype Values interface {\n\t// Return raw data\n        Bytes() []byte\n\t// Retrieve a value\n        Get(path ...string) Value\n\t// Return values as a map\n        Map() map[string]interface{}\n\t// Scan config into a Go type\n        Scan(v interface{}) error\n}"]],["p",["code","Value"],"接口支持使用构建、类型断言转化成 go 类型的值，默认使用回退值。"],["pre",{lang:"go",highlighted:'<span class="token keyword">type</span> Value <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n\t<span class="token function">Bool</span><span class="token punctuation">(</span>def <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>\n\t<span class="token function">Int</span><span class="token punctuation">(</span>def <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>\n\t<span class="token function">String</span><span class="token punctuation">(</span>def <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>\n\t<span class="token function">Float64</span><span class="token punctuation">(</span>def <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>\n\t<span class="token function">Duration</span><span class="token punctuation">(</span>def time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> time<span class="token punctuation">.</span>Duration\n\t<span class="token function">StringSlice</span><span class="token punctuation">(</span>def <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>\n\t<span class="token function">StringMap</span><span class="token punctuation">(</span>def <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>\n\t<span class="token function">Scan</span><span class="token punctuation">(</span>val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n\t<span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>\n<span class="token punctuation">}</span>'},["code","type Value interface {\n\tBool(def bool) bool\n\tInt(def int) int\n\tString(def string) string\n\tFloat64(def float64) float64\n\tDuration(def time.Duration) time.Duration\n\tStringSlice(def []string) []string\n\tStringMap(def map[string]string) map[string]string\n\tScan(val interface{}) error\n\tBytes() []byte\n}"]],["h2","Config"],["p",["code","Config"],"管理所有配置、抽象后的资源、编码器及 reader。"],["p","读取、同步、监视多个后台资源，把资源合并成单一集合以供查询。"],["pre",{lang:"go",highlighted:'<span class="token comment" spellcheck="true">// Config is an interface abstraction for dynamic configuration</span>\n<span class="token keyword">type</span> Config <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// provide the reader.Values interface</span>\n        reader<span class="token punctuation">.</span>Values\n\t<span class="token comment" spellcheck="true">// Stop the config loader/watcher</span>\n\t<span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n\t<span class="token comment" spellcheck="true">// Load config sources</span>\n\t<span class="token function">Load</span><span class="token punctuation">(</span>source <span class="token operator">...</span>source<span class="token punctuation">.</span>Source<span class="token punctuation">)</span> <span class="token builtin">error</span>\n\t<span class="token comment" spellcheck="true">// Force a source changeset sync</span>\n\t<span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n\t<span class="token comment" spellcheck="true">// Watch a value for changes</span>\n\t<span class="token function">Watch</span><span class="token punctuation">(</span>path <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Watcher<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code","// Config is an interface abstraction for dynamic configuration\ntype Config interface {\n        // provide the reader.Values interface\n        reader.Values\n\t// Stop the config loader/watcher\n\tClose() error\n\t// Load config sources\n\tLoad(source ...source.Source) error\n\t// Force a source changeset sync\n\tSync() error\n\t// Watch a value for changes\n\tWatch(path ...string) (Watcher, error)\n}"]],["h2","使用方式"],["ul",["li",["p",["a",{title:null,href:"#简单示例"},"简单示例"]]],["li",["p",["a",{title:null,href:"#新增配置实例"},"新增配置实例"]]],["li",["p",["a",{title:null,href:"#加载配置"},"加载配置"]]],["li",["p",["a",{title:null,href:"#读取全部配置"},"读取全部配置"]]],["li",["p",["a",{title:null,href:"#读取指定配置"},"读取指定配置"]]],["li",["p",["a",{title:null,href:"#监控配置"},"监控配置"]]],["li",["p",["a",{title:null,href:"#使用多数据源"},"使用多数据源"]]],["li",["p",["a",{title:null,href:"#设置源编码"},"设置源编码器"]]],["li",["p",["a",{title:null,href:"#增加读编码"},"增加读编码器"]]]],["h3","简单示例"],["p","配置文件可以是 Encoder 解码器支持的任何格式："],["p","JSON json config:"],["pre",{lang:"json",highlighted:'<span class="token punctuation">{</span>\n  <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"database"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"10.0.0.1"</span><span class="token punctuation">,</span>\n      <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">3306</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"cache"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"10.0.0.2"</span><span class="token punctuation">,</span>\n      <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">6379</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>'},["code",'{\n  "hosts": {\n    "database": {\n      "address": "10.0.0.1",\n      "port": 3306\n    },\n    "cache": {\n      "address": "10.0.0.2",\n      "port": 6379\n    }\n  }\n}']],["h3","新增配置实例"],["p","新增配置（直接使用默认的配置对象也可）"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token string">"github.com/micro/go-micro/v2/config"</span>\n\nconf <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">NewConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>'},["code",'import "github.com/micro/go-micro/v2/config"\n\nconf := config.NewConfig()']],["h3","加载配置"],["p","加载文件配置，文件的扩展名即为配置的格式。"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"github.com/micro/go-micro/v2/config"</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment" spellcheck="true">// Load json config file</span>\nconfig<span class="token punctuation">.</span><span class="token function">LoadFile</span><span class="token punctuation">(</span><span class="token string">"/tmp/config.json"</span><span class="token punctuation">)</span>'},["code",'import (\n\t"github.com/micro/go-micro/v2/config"\n)\n\n// Load json config file\nconfig.LoadFile("/tmp/config.json")']],["p","也可以是其它如 yaml、toml 或者 xml，看适当情况使用。"],["pre",{lang:"go",highlighted:'<span class="token comment" spellcheck="true">// Load yaml config file</span>\nconfig<span class="token punctuation">.</span><span class="token function">LoadFile</span><span class="token punctuation">(</span><span class="token string">"/tmp/config.yaml"</span><span class="token punctuation">)</span>'},["code",'// Load yaml config file\nconfig.LoadFile("/tmp/config.yaml")']],["p","如果没有扩展名时，则指定编码器"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"github.com/micro/go-micro/v2/config"</span>\n\t<span class="token string">"github.com/micro/go-micro/v2/config/source/file"</span>\n<span class="token punctuation">)</span>\n\nenc <span class="token operator">:=</span> toml<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment" spellcheck="true">// Load toml file with encoder</span>\nconfig<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>\n        file<span class="token punctuation">.</span><span class="token function">WithPath</span><span class="token punctuation">(</span><span class="token string">"/tmp/config"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tsource<span class="token punctuation">.</span><span class="token function">WithEncoder</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span>'},["code",'import (\n\t"github.com/micro/go-micro/v2/config"\n\t"github.com/micro/go-micro/v2/config/source/file"\n)\n\nenc := toml.NewEncoder()\n\n// Load toml file with encoder\nconfig.Load(file.NewSource(\n        file.WithPath("/tmp/config"),\n\tsource.WithEncoder(enc),\n))']],["h3","读取全部配置"],["p","读取全部配置"],["pre",{lang:"go",highlighted:'<span class="token comment" spellcheck="true">// retrieve map[string]interface{}</span>\nconf <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment" spellcheck="true">// map[cache:map[address:10.0.0.2 port:6379] database:map[address:10.0.0.1 port:3306]]</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>conf<span class="token punctuation">[</span><span class="token string">"hosts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>'},["code",'// retrieve map[string]interface{}\nconf := config.Map()\n\n// map[cache:map[address:10.0.0.2 port:6379] database:map[address:10.0.0.1 port:3306]]\nfmt.Println(conf["hosts"])']],["p","将配置写入结构"],["pre",{lang:"go",highlighted:'<span class="token keyword">type</span> Host <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n        Address <span class="token builtin">string</span> <span class="token string">`json:"address"`</span>\n        Port <span class="token builtin">int</span> <span class="token string">`json:"port"`</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Config <span class="token keyword">struct</span><span class="token punctuation">{</span>\n\tHosts <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Host <span class="token string">`json:"hosts"`</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> conf Config\n\nconfig<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conf<span class="token punctuation">)</span>\n\n<span class="token comment" spellcheck="true">// 10.0.0.1 3306</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>Hosts<span class="token punctuation">[</span><span class="token string">"database"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Address<span class="token punctuation">,</span> conf<span class="token punctuation">.</span>Hosts<span class="token punctuation">[</span><span class="token string">"database"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Port<span class="token punctuation">)</span>'},["code",'type Host struct {\n        Address string `json:"address"`\n        Port int `json:"port"`\n}\n\ntype Config struct{\n\tHosts map[string]Host `json:"hosts"`\n}\n\nvar conf Config\n\nconfig.Scan(&conf)\n\n// 10.0.0.1 3306\nfmt.Println(conf.Hosts["database"].Address, conf.Hosts["database"].Port)']],["h3","读取指定配置"],["p","如果将配置写入结构"],["pre",{lang:"go",highlighted:'<span class="token keyword">type</span> Host <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tAddress <span class="token builtin">string</span> <span class="token string">`json:"address"`</span>\n\tPort <span class="token builtin">int</span> <span class="token string">`json:"port"`</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> host Host\n\nconfig<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"hosts"</span><span class="token punctuation">,</span> <span class="token string">"database"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>host<span class="token punctuation">)</span>\n\n<span class="token comment" spellcheck="true">// 10.0.0.1 3306</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> host<span class="token punctuation">.</span>Port<span class="token punctuation">)</span>'},["code",'type Host struct {\n\tAddress string `json:"address"`\n\tPort int `json:"port"`\n}\n\nvar host Host\n\nconfig.Get("hosts", "database").Scan(&host)\n\n// 10.0.0.1 3306\nfmt.Println(host.Address, host.Port)']],["p","读取独立的值"],["pre",{lang:"go",highlighted:'<span class="token comment" spellcheck="true">// 获取address值，缺省值使用 “localhost”</span>\naddress <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"hosts"</span><span class="token punctuation">,</span> <span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span>\n\n<span class="token comment" spellcheck="true">// 获取port值，缺省值使用 3000</span>\nport <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"hosts"</span><span class="token punctuation">,</span> <span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>'},["code",'// 获取address值，缺省值使用 “localhost”\naddress := config.Get("hosts", "database", "address").String("localhost")\n\n// 获取port值，缺省值使用 3000\nport := config.Get("hosts", "database", "port").Int(3000)']],["h3","监控配置"],["p","观测目录的变化。当文件有改动时，新值便可生效。"],["pre",{lang:"go",highlighted:'w<span class="token punctuation">,</span> err <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">"hosts"</span><span class="token punctuation">,</span> <span class="token string">"database"</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// do something</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// wait for next value</span>\nv<span class="token punctuation">,</span> err <span class="token operator">:=</span> w<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// do something</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> host Host\n\nv<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>host<span class="token punctuation">)</span>'},["code",'w, err := config.Watch("hosts", "database")\nif err != nil {\n\t// do something\n}\n\n// wait for next value\nv, err := w.Next()\nif err != nil {\n\t// do something\n}\n\nvar host Host\n\nv.Scan(&host)']],["h3","使用多数据源"],["p","多资源可以加载并合并，合并优先级顺序则是反向的，即后面导入的优先级高。"],["pre",{lang:"go",highlighted:'config<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>\n\t<span class="token comment" spellcheck="true">// base config from env</span>\n\tenv<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token comment" spellcheck="true">// override env with flags</span>\n\tflag<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token comment" spellcheck="true">// override flags with file</span>\n\tfile<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>\n\t\tfile<span class="token punctuation">.</span><span class="token function">WithPath</span><span class="token punctuation">(</span><span class="token string">"/tmp/config.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>'},["code",'config.Load(\n\t// base config from env\n\tenv.NewSource(),\n\t// override env with flags\n\tflag.NewSource(),\n\t// override flags with file\n\tfile.NewSource(\n\t\tfile.WithPath("/tmp/config.json"),\n\t),\n)']],["h3","设置源编码器"],["p","资源需要编码器才能将配置编码与解码成所需的 changeset 格式。"],["p","默认编码器是 JSON 格式，也可以使用 yaml、xml、toml 等选项。"],["pre",{lang:"go",highlighted:'e <span class="token operator">:=</span> yaml<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\ns <span class="token operator">:=</span> consul<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>\n\tsource<span class="token punctuation">.</span><span class="token function">WithEncoder</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>'},["code","e := yaml.NewEncoder()\n\ns := consul.NewSource(\n\tsource.WithEncoder(e),\n)"]],["h3","增加读编码器"],["p","Reader 使用各种编码器来解码不同格式源的数据。"],["p","默认的 Reader 支持 json、yaml、xml、toml、hcl，合并配置后会把其转成 json 格式。"],["p","也可指定给其特定的编码器："],["pre",{lang:"go",highlighted:'e <span class="token operator">:=</span> yaml<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nr <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>\n\treader<span class="token punctuation">.</span><span class="token function">WithEncoder</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>'},["code","e := yaml.NewEncoder()\n\nr := json.NewReader(\n\treader.WithEncoder(e),\n)"]],["h2","常见问题"],["h3","与 Viper 有哪些不同？"],["p",["a",{title:null,href:"https://github.com/spf13/viper"},"Viper"],"与 go-config 都着力解决同样的问题，只是 Go-confi 使用不同的接口，并且它是 micro 工具生态中的一员。"],["h3","Encoder 和 Reader 有什么不同？"],["p","Encoder 编码器负责的是后台资源数据的编解码工作。而 Reader 则使用不同的 encoder 解码，解码的配置源可能有不同的格式，而这些 encoder 会解决这个事情并合并成单一编码格式。"],["p","如果是文件资源，则配置的解码器取决于文件的扩展名。"],["p","如果是基于 consul 的配置、etcd 或类似的键值对资源，则可能会从前缀中带有多个键（特定规则）的加载，也就是说资源需要明白编码，才能返回单一的变更集。"],["p","如果是环境变量、参数 flag，则会把这些值编码成 byte 数组，指定格式以备 reader 合并。"],["h3","为什么 changeset 变更集不是 map",["span","string"],"interface{}的格式？"],["p","总有配置源数据不是键值对的情况，而 byte 数组的方式再解码给 Reader 更简单些。"]],meta:{order:13,title:"Go Config 配置库",filename:"docs/stack-rpc/go-config.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#特性",title:"特性"},"特性"]],["li",["a",{className:"bisheng-toc-h2",href:"#开始",title:"开始"},"开始"]],["li",["a",{className:"bisheng-toc-h2",href:"#Sources",title:"Sources"},"Sources"]],["li",["a",{className:"bisheng-toc-h2",href:"#Encoder",title:"Encoder"},"Encoder"]],["li",["a",{className:"bisheng-toc-h2",href:"#Reader",title:"Reader"},"Reader"]],["li",["a",{className:"bisheng-toc-h2",href:"#Config",title:"Config"},"Config"]],["li",["a",{className:"bisheng-toc-h2",href:"#使用方式",title:"使用方式"},"使用方式"]],["li",["a",{className:"bisheng-toc-h2",href:"#常见问题",title:"常见问题"},"常见问题"]]]}}}]);