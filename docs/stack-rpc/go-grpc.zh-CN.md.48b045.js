(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{3200:function(n,s){n.exports={content:["article",["p","Micro gRPC 是 micro 的 gRPC 框架插件，简化开发基于 gRPC 的服务。"],["h2","概览"],["p","micro 提供有基于 Go 的 gRPC 插件",["a",{title:null,href:"https://github.com/micro/go-micro"},"go-micro"],"，该插件可以在内部集成 gPRC，并与之无缝交互，让开发 gRPC 更简单，并支持",["a",{title:null,href:"https://github.com/grpc-ecosystem/grpc-gateway"},"grpc-gateway"],"。"],["p","micro 有面向 gRPC 的",["a",{title:null,href:"https://github.com/micro/go-plugins/tree/master/client"},"客户端"],"和",["a",{title:null,href:"https://github.com/micro/go-plugins/tree/master/server"},"服务端"],"插件，go-grpc 库调用客户端/服务端插件生成 micro 需要的 gRPC 代码，而客户端/服务端插件都是从",["a",{title:null,href:"https://github.com/grpc/grpc-go"},"github.com/grpc/grpc-go"],"扩展而来，也即是说，我们不需要去知道 go-micro 是如何编解码或传输节点就可以使用原生的 gRPC。"],["p",["img",{src:"../images/go-grpc.png"}]],["h2","示例"],["p","我们提供了一个简单的节点 Greeter 问候程序来演示对 gRPC 的支持：",["a",{title:null,href:"https://github.com/micro/go-micro/blob/master/service/grpc/README_cn.md"},"examples/greeter"],"。"],["h2","安装 protobuf"],["p","我们需要使用 Protobuf 来生成代码，请根据您的环境参考",["a",{title:null,href:"https://github.com/protocolbuffers/protobuf"},"protobuf"],"安装。"],["p","安装好 protobuf 后，还需要安装"],["ul",["li",["p",["a",{title:null,href:"https://github.com/micro/protoc-gen-micro"},"protoc-gen-micro"]]]],["h2","服务发现"],["p","服务发现负责把服务名到服务所在地址。"],["h3","Consul"],["p","micro 默认使用",["a",{title:null,href:"https://www.consul.io/"},"Consul"]," 作为服务发现的注册中心。您可以查考",["a",{title:null,href:"https://www.consul.io/intro/getting-started/install.html"},"install guide"],"安装。"],["p","发现机制是可插拔的，我们目前支持使用 etcd、kubernetes、zookeeper 等等，具体详见",["a",{title:null,href:"https://github.com/micro/go-plugins"},"micro/go-plugins"],"。"],["h3","mDNS"],["p",["a",{title:null,href:"https://en.wikipedia.org/wiki/Multicast_DNS"},"组播，Multicast DNS"],"已经内置在 micro 中，mDNS 不需要依赖任何注册中心，可以在一般情况下的局域网中使用。"],["p","在 micro 服务的任意启动指令中传入",["code","--registry=mdns"],"或者声明环境变量",["code","MICRO_REGISTRY=mdns"],"也可，比如："],["pre",{lang:null,highlighted:'MICRO_REGISTRY<span class="token operator">=</span>mdns go run main<span class="token punctuation">.</span>go'},["code","MICRO_REGISTRY=mdns go run main.go"]],["h2","编写服务"],["p","Go-grpc 服务与 go-micro 服务一样，也就是说你可以直接将服务声明方式",["code","micro.NewService"],"换成",["code","grpc.NewService"],"，而不需要改动其它代码。"],["pre",{lang:"go",highlighted:'<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"context"</span>\n\t<span class="token string">"time"</span>\n\n\t<span class="token string">"github.com/micro/go-grpc"</span>\n\t<span class="token string">"github.com/micro/go-micro/v2"</span>\n\thello <span class="token string">"github.com/micro/go-grpc/examples/greeter/server/proto/hello"</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Say <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Say<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>hello<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> rsp <span class="token operator">*</span>hello<span class="token punctuation">.</span>Response<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\trsp<span class="token punctuation">.</span>Msg <span class="token operator">=</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>Name\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tservice <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\t\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\thello<span class="token punctuation">.</span><span class="token function">RegisterSayHandler</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>Say<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">if</span> err <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tlog<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>'},["code",'package main\n\nimport (\n\t"context"\n\t"time"\n\n\t"github.com/micro/go-grpc"\n\t"github.com/micro/go-micro/v2"\n\thello "github.com/micro/go-grpc/examples/greeter/server/proto/hello"\n)\n\ntype Say struct{}\n\nfunc (s *Say) Hello(ctx context.Context, req *hello.Request, rsp *hello.Response) error {\n\trsp.Msg = "Hello " + req.Name\n\treturn nil\n}\n\nfunc main() {\n\tservice := grpc.NewService(\n\t\tmicro.Name("greeter"),\n\t)\n\n\tservice.Init()\n\n\thello.RegisterSayHandler(service.Server(), new(Say))\n\n\tif err := service.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}']],["h2","使用 Micro"],["p","您可能需要使用 micro 的工具集编写 grpc 服务，micro 支持使用工具集预构建或者简单把 grpc 的客户端插件导入项目中重新编译构建即可。"],["h3","安装 micro"],["pre",{lang:null,highlighted:'go get github<span class="token punctuation">.</span>com<span class="token operator">/</span>micro<span class="token operator">/</span>go<span class="token operator">-</span>grpc<span class="token operator">/</span>cmd<span class="token operator">/</span>micro'},["code","go get github.com/micro/go-grpc/cmd/micro"]],["h3","或者自行编译"],["pre",{lang:null,highlighted:'go get github<span class="token punctuation">.</span>com<span class="token operator">/</span>micro<span class="token operator">/</span>micro'},["code","go get github.com/micro/micro"]],["p","在 main.go 目录创建 plugins.go 文件，专门引入插件"],["pre",{lang:"go",highlighted:'<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/client/grpc"</span>\n<span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/server/grpc"</span>'},["code",'package main\n\nimport _ "github.com/micro/go-plugins/client/grpc"\nimport _ "github.com/micro/go-plugins/server/grpc"']],["p","重新编译二进制"],["pre",{lang:"shell",highlighted:'<span class="token operator">/</span><span class="token operator">/</span> 本地使用\ngo build <span class="token operator">-</span>i <span class="token operator">-</span>o micro <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>go <span class="token punctuation">.</span><span class="token operator">/</span>plugins<span class="token punctuation">.</span>go'},["code","// 本地使用\ngo build -i -o micro ./main.go ./plugins.go"]],["p","使用插件"],["pre",{lang:"shell",highlighted:'micro <span class="token operator">-</span><span class="token operator">-</span>client<span class="token operator">=</span>grpc <span class="token operator">-</span><span class="token operator">-</span>server<span class="token operator">=</span>grpc'},["code","micro --client=grpc --server=grpc"]],["h2","gRPC 网关"],["p","Go-grpc 与 gRPC 生态是无缝集成的，所以 grpc-gateway 使用没特别之处。"],["p","我们提供了简单的问候 Greeter 服务，可以参考",["a",{title:null,href:"https://github.com/micro/examples/tree/master/grpc/gateway"},"examples/grpc/gateway"],"。"]],meta:{order:14,title:"Go gRPC支持",filename:"docs/stack-rpc/go-grpc.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#概览",title:"概览"},"概览"]],["li",["a",{className:"bisheng-toc-h2",href:"#示例",title:"示例"},"示例"]],["li",["a",{className:"bisheng-toc-h2",href:"#安装-protobuf",title:"安装 protobuf"},"安装 protobuf"]],["li",["a",{className:"bisheng-toc-h2",href:"#服务发现",title:"服务发现"},"服务发现"]],["li",["a",{className:"bisheng-toc-h2",href:"#编写服务",title:"编写服务"},"编写服务"]],["li",["a",{className:"bisheng-toc-h2",href:"#使用-Micro",title:"使用 Micro"},"使用 Micro"]],["li",["a",{className:"bisheng-toc-h2",href:"#gRPC-网关",title:"gRPC 网关"},"gRPC 网关"]]]}}}]);