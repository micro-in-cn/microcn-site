(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{3202:function(n,s){n.exports={content:["article",["p","Go Micro 是可插拔的微服务开发框架。"],["h2","概览"],["p","Go Micro 提供分布式系统开发的核心库，包含 RPC 与事件驱动的通信机制。"],["p",["strong","micro"],"的设计哲学是可插拔的架构理念，她提供可快速构建系统的组件，并且可以根据自身的需求剥离默认实现并自行定制。"],["h2","特性"],["p","Go Micro 把分布式系统的各种细节抽象出来。下面是它的主要特性。"],["ul",["li",["p",["strong","服务发现（Service Discovery）"]," - 自动服务注册与名称解析。服务发现是微服务开发中的核心。当服务 A 要与服务 B 协作时，它得知道 B 在哪里。默认的服务发现系统是 Consul，而 multicast DNS (mdns，组播)机制作为本地解决方案，或者零依赖的 P2P 网络中的 SWIM 协议（gossip）。"]],["li",["p",["strong","负载均衡（Load Balancing）"]," - 在服务发现之上构建了负载均衡机制。当我们得到一个服务的任意多个的实例节点时，我们要一个机制去决定要路由到哪一个节点。我们使用随机处理过的哈希负载均衡机制来保证对服务请求颁发的均匀分布，并且在发生问题时进行重试。"]],["li",["p",["strong","消息编码（Message Encoding）"]," - 支持基于内容类型（content-type）动态编码消息。客户端和服务端会一起使用 content-type 的格式来对 Go 进行无缝编/解码。各种各样的消息被编码会发送到不同的客户端，客户端服服务端默认会处理这些消息。content-type 默认包含 proto-rpc 和 json-rpc。"]],["li",["p",["strong","Request/Response"]," - RPC 通信基于支持双向流的请求/响应方式，我们提供有抽象的同步通信机制。请求发送到服务时，会自动解析、负载均衡、拨号、转成字节流，默认的传输协议是 http/1.1，而 tls 下使用 http2 协议。"]],["li",["p",["strong","异步消息（Async Messaging）"]," - 发布订阅（PubSub）头等功能内置在异步通信与事件驱动架构中。事件通知在微服务开发中处于核心位置。默认的消息传送使用点到点 http/1.1，激活 tls 时则使用 http2。"]],["li",["p",["strong","可插拔接口（Pluggable Interfaces）"]," - Go Micro 为每个分布式系统抽象出接口。因此，Go Micro 的接口都是可插拔的，允许其在运行时不可知的情况下仍可支持。所以只要实现接口，可以在内部使用任何的技术。更多插件请参考：",["a",{title:null,href:"https://github.com/micro/go-plugins"},"github.com/micro/go-plugins"],"。"]]],["h2","安装 protobuf"],["p","代码生成依赖 Protobuf，参考安装："],["ul",["li",["p",["a",{title:null,href:"https://github.com/micro/protoc-gen-micro"},"protoc-gen-micro"]]]],["h2","服务发现"],["p","服务发现用于解析服务名与地址。"],["h3","Consul"],["p",["a",{title:null,href:"https://www.consul.io/"},"Consul"]," 在 Go Micro 中是默认（以后的版本可能会更改）的服务发现注册中心。"],["p","发现系统可插拔，其它插件像 etcd, kubernetes, zookeeper 可以参考",["a",{title:null,href:"https://github.com/micro/go-plugins"},"micro/go-plugins"]," 库。"],["p",["a",{title:null,href:"https://www.consul.io/intro/getting-started/install.html"},"Consul 安装指导"]],["p","安装好后，可以在命令行启动时传入变量或指令便可以使用 consul 作为注册中心："],["pre",{lang:"bash",highlighted:'$ MICRO_REGISTRY<span class="token operator">=</span>consul go run main.go'},["code","$ MICRO_REGISTRY=consul go run main.go"]],["p","或者"],["pre",{lang:"bash",highlighted:'$ go run main.go --registry<span class="token operator">=</span>consul'},["code","$ go run main.go --registry=consul"]],["h3","Multicast DNS"],["p",["a",{title:null,href:"https://en.wikipedia.org/wiki/Multicast_DNS"},"组播 dns"],"内置在服务发现系统之中的插件，提供零依赖的配置。"],["p","在启动命令中传入 ",["code","--registry=mdns"],"，或声明环境变量 ",["code","MICRO_REGISTRY=mdns"],"："],["pre",{lang:null,highlighted:'MICRO_REGISTRY<span class="token operator">=</span>mdns go run main<span class="token punctuation">.</span>go'},["code","MICRO_REGISTRY=mdns go run main.go"]],["h2","编写服务"],["p","我们写一个简单的问候（greeter）程序作为示例。"],["p","例子可参考：",["a",{title:null,href:"https://github.com/micro/examples/tree/master/service"},"examples/service"],"."],["h3","服务原型"],["p","微服务中有个关键需求点，就是接口的强定义。Micro 使用 protobuf 来完成这个需求。下面我们定义 Greeter 处理器，它有一个 Hello 方法。它有 HelloRequest 入参对象及 HelloResponse 出参对象，两个对象都有一个字符串类型的参数。"],["pre",{lang:"proto",highlighted:'syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token comment" spellcheck="true">;</span>\n\nservice Greeter {\n\trpc <span class="token function">Hello</span><span class="token punctuation">(</span>HelloRequest<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>HelloResponse<span class="token punctuation">)</span> {}\n}\n\nmessage HelloRequest {\n\tstring name <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n}\n\nmessage HelloResponse {\n\tstring greeting <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">;</span>\n}'},["code",'syntax = "proto3";\n\nservice Greeter {\n\trpc Hello(HelloRequest) returns (HelloResponse) {}\n}\n\nmessage HelloRequest {\n\tstring name = 1;\n}\n\nmessage HelloResponse {\n\tstring greeting = 2;\n}']],["h3","生成原型"],["p","在定义好原型后我们得使用 protoc 及 micro 的插件编译它，micro 插件可以帮助生成 go micro 需要的原型文件"],["pre",{lang:"shell",highlighted:'protoc <span class="token operator">-</span><span class="token operator">-</span>proto_path<span class="token operator">=</span><span class="token variable">$GOPATH</span><span class="token operator">/</span>src<span class="token punctuation">:</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token operator">-</span>micro_out<span class="token operator">=</span><span class="token punctuation">.</span> <span class="token operator">-</span><span class="token operator">-</span>go_out<span class="token operator">=</span><span class="token punctuation">.</span> path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>greeter<span class="token punctuation">.</span>proto'},["code","protoc --proto_path=$GOPATH/src:. --micro_out=. --go_out=. path/to/greeter.proto"]],["h3","编写服务"],["p","下方的代码是 greeter 服务的代码"],["p","它要实现下面的几个要求"],["ol",["li",["p","实现在 Greeter Handler 中定义的接口。"]],["li",["p","初始化 micro.Service"]],["li",["p","注册 Greeter handler"]],["li",["p","运行服务"]]],["pre",{lang:"go",highlighted:'<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"context"</span>\n\t<span class="token string">"fmt"</span>\n\n\tmicro <span class="token string">"github.com/micro/go-micro/v2"</span>\n\tproto <span class="token string">"github.com/micro/examples/service/proto"</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Greeter <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Greeter<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">,</span> rsp <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelloResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\trsp<span class="token punctuation">.</span>Greeting <span class="token operator">=</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>Name\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// 创建新的服务，这里可以传入其它选项。</span>\n\tservice <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\t\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 初始化方法会解析命令行标识</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 注册处理器</span>\n\tproto<span class="token punctuation">.</span><span class="token function">RegisterGreeterHandler</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>Greeter<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 运行服务</span>\n\t<span class="token keyword">if</span> err <span class="token operator">:=</span> service<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>'},["code",'package main\n\nimport (\n\t"context"\n\t"fmt"\n\n\tmicro "github.com/micro/go-micro/v2"\n\tproto "github.com/micro/examples/service/proto"\n)\n\ntype Greeter struct{}\n\nfunc (g *Greeter) Hello(ctx context.Context, req *proto.HelloRequest, rsp *proto.HelloResponse) error {\n\trsp.Greeting = "Hello " + req.Name\n\treturn nil\n}\n\nfunc main() {\n\t// 创建新的服务，这里可以传入其它选项。\n\tservice := micro.NewService(\n\t\tmicro.Name("greeter"),\n\t)\n\n\t// 初始化方法会解析命令行标识\n\tservice.Init()\n\n\t// 注册处理器\n\tproto.RegisterGreeterHandler(service.Server(), new(Greeter))\n\n\t// 运行服务\n\tif err := service.Run(); err != nil {\n\t\tfmt.Println(err)\n\t}\n}']],["h3","运行服务"],["pre",{lang:null,highlighted:'go run examples<span class="token operator">/</span>service<span class="token operator">/</span>main<span class="token punctuation">.</span>go'},["code","go run examples/service/main.go"]],["p","输出"],["pre",{lang:null,highlighted:'<span class="token number">2016</span><span class="token operator">/</span><span class="token number">03</span><span class="token operator">/</span><span class="token number">14</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">14</span> Listening on <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">50137</span>\n<span class="token number">2016</span><span class="token operator">/</span><span class="token number">03</span><span class="token operator">/</span><span class="token number">14</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">14</span> Broker Listening on <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">50138</span>\n<span class="token number">2016</span><span class="token operator">/</span><span class="token number">03</span><span class="token operator">/</span><span class="token number">14</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">14</span> Registering node<span class="token punctuation">:</span> greeter<span class="token operator">-</span>ca62b017<span class="token operator">-</span>e9d3<span class="token operator">-</span><span class="token number">11e5</span><span class="token operator">-</span>9bbb<span class="token operator">-</span>68a86d0d36b6'},["code","2016/03/14 10:59:14 Listening on [::]:50137\n2016/03/14 10:59:14 Broker Listening on [::]:50138\n2016/03/14 10:59:14 Registering node: greeter-ca62b017-e9d3-11e5-9bbb-68a86d0d36b6"]],["h3","定义客户端"],["p","下面的客户端代码用来查询 greeter 服务。上面我们生成的 proto 原型文件中包含了客户端部分，这样可以减少模板代码量。"],["pre",{lang:"go",highlighted:'<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"context"</span>\n\t<span class="token string">"fmt"</span>\n\n\tmicro <span class="token string">"github.com/micro/go-micro/v2"</span>\n\tproto <span class="token string">"github.com/micro/examples/service/proto"</span>\n<span class="token punctuation">)</span>\n\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// 定义服务，可以传入其它可选参数</span>\n\tservice <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>micro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter.client"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 创建新的客户端</span>\n\tgreeter <span class="token operator">:=</span> proto<span class="token punctuation">.</span><span class="token function">NewGreeterService</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 调用greeter</span>\n\trsp<span class="token punctuation">,</span> err <span class="token operator">:=</span> greeter<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>proto<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment" spellcheck="true">// 打印响应请求</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>rsp<span class="token punctuation">.</span>Greeting<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'package main\n\nimport (\n\t"context"\n\t"fmt"\n\n\tmicro "github.com/micro/go-micro/v2"\n\tproto "github.com/micro/examples/service/proto"\n)\n\n\nfunc main() {\n\t// 定义服务，可以传入其它可选参数\n\tservice := micro.NewService(micro.Name("greeter.client"))\n\tservice.Init()\n\n\t// 创建新的客户端\n\tgreeter := proto.NewGreeterService("greeter", service.Client())\n\n\t// 调用greeter\n\trsp, err := greeter.Hello(context.TODO(), &proto.HelloRequest{Name: "John"})\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\t// 打印响应请求\n\tfmt.Println(rsp.Greeting)\n}']],["h3","运行客户端"],["pre",{lang:"shell",highlighted:'go run client<span class="token punctuation">.</span>go'},["code","go run client.go"]],["p","输出"],["pre",{lang:null,highlighted:"Hello John"},["code","Hello John"]],["h2","编写 Function"],["p","Go Micro 包含了函数式编程模型。"],["p","Function 是指接收一次请求，执行后便退出的服务"],["h3","定义 Function"],["pre",{lang:"go",highlighted:'<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"context"</span>\n\n\tproto <span class="token string">"github.com/micro/examples/function/proto"</span>\n\t<span class="token string">"github.com/micro/go-micro/v2"</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Greeter <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Greeter<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">,</span> rsp <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelloResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\trsp<span class="token punctuation">.</span>Greeting <span class="token operator">=</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>Name\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// 创建新函数</span>\n\tfnc <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewFunction</span><span class="token punctuation">(</span>\n\t\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 初始化命令行</span>\n\tfnc<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 注册handler</span>\n\tfnc<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>Greeter<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// 运行服务</span>\n\tfnc<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'package main\n\nimport (\n\t"context"\n\n\tproto "github.com/micro/examples/function/proto"\n\t"github.com/micro/go-micro/v2"\n)\n\ntype Greeter struct{}\n\nfunc (g *Greeter) Hello(ctx context.Context, req *proto.HelloRequest, rsp *proto.HelloResponse) error {\n\trsp.Greeting = "Hello " + req.Name\n\treturn nil\n}\n\nfunc main() {\n\t// 创建新函数\n\tfnc := micro.NewFunction(\n\t\tmicro.Name("greeter"),\n\t)\n\n\t// 初始化命令行\n\tfnc.Init()\n\n\t// 注册handler\n\tfnc.Handle(new(Greeter))\n\n\t// 运行服务\n\tfnc.Run()\n}']],["p","简单吧！"],["h2","发布与订阅"],["p","Go-micro 给事件驱动架构内置了消息代理（broker）接口。发布与订阅像 RPC 一样操控生成的 protobuf 消息。这些消息会自动编/解码并通过代理发送。"],["p","Go-micro 默认包含点到点的 http 代理，但是也可以通过 go-plugins 把这层逻辑替换掉。"],["h3","发布"],["p","创建发布器，传入",["code","topic"],"主题名，及服务客户端。"],["pre",{lang:"go",highlighted:'p <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewPublisher</span><span class="token punctuation">(</span><span class="token string">"events"</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>'},["code",'p := micro.NewPublisher("events", service.Client())']],["p","发布一条 protobuf 消息"],["pre",{lang:"go",highlighted:'p<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>proto<span class="token punctuation">.</span>Event<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"event"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>'},["code",'p.Publish(context.TODO(), &proto.Event{Name: "event"})']],["h3","订阅"],["p","创建消息处理器，签名得是",["code","func(context.Context, v interface{}) error"],"。"],["pre",{lang:"go",highlighted:'<span class="token keyword">func</span> <span class="token function">ProcessEvent</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> event <span class="token operator">*</span>proto<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Got event %+v\\n"</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>'},["code",'func ProcessEvent(ctx context.Context, event *proto.Event) error {\n\tfmt.Printf("Got event %+v\\n", event)\n\treturn nil\n}']],["p","在这个消息处理器注册上",["code","topic"],"主题"],["pre",{lang:"go",highlighted:'micro<span class="token punctuation">.</span><span class="token function">RegisterSubscriber</span><span class="token punctuation">(</span><span class="token string">"events"</span><span class="token punctuation">,</span> ProcessEvent<span class="token punctuation">)</span>'},["code",'micro.RegisterSubscriber("events", ProcessEvent)']],["p","查看完成例子：",["a",{title:null,href:"https://github.com/micro/examples/tree/master/pubsub"},"examples/pubsub"]],["h2","插件"],["p","Go-micro 默认下只提供了少量的核心接口实现，但是这些都是可插拔的。",["a",{title:null,href:"https://github.com/micro/go-plugins"},"github.com/micro/go-plugins"],"提供了一捆插件，可以供参考，也欢迎贡献您的代码。"],["h3","构建插件"],["p","如果想要集成插件，只需要把插件位置导入到文件中，重新编译即可。"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">(</span>\n        <span class="token comment" spellcheck="true">// etcd v3 registry</span>\n        <span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/registry/etcdv3"</span>\n        <span class="token comment" spellcheck="true">// nats transport</span>\n        <span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/transport/nats"</span>\n        <span class="token comment" spellcheck="true">// kafka broker</span>\n        <span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/broker/kafka"</span>\n<span class="token punctuation">)</span>'},["code",'import (\n        // etcd v3 registry\n        _ "github.com/micro/go-plugins/registry/etcdv3"\n        // nats transport\n        _ "github.com/micro/go-plugins/transport/nats"\n        // kafka broker\n        _ "github.com/micro/go-plugins/broker/kafka"\n)']],["p","打包二进制文件："],["pre",{lang:"shell",highlighted:'<span class="token operator">/</span><span class="token operator">/</span> 本地使用\ngo build <span class="token operator">-</span>i <span class="token operator">-</span>o service <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>go <span class="token punctuation">.</span><span class="token operator">/</span>plugins<span class="token punctuation">.</span>go'},["code","// 本地使用\ngo build -i -o service ./main.go ./plugins.go"]],["p","标识使用插件"],["pre",{lang:"shell",highlighted:'service <span class="token operator">-</span><span class="token operator">-</span>registry<span class="token operator">=</span>etcdv3 <span class="token operator">-</span><span class="token operator">-</span>transport<span class="token operator">=</span>nats <span class="token operator">-</span><span class="token operator">-</span>broker<span class="token operator">=</span>kafka'},["code","service --registry=etcdv3 --transport=nats --broker=kafka"]],["h3","插件即选项"],["p","另外，你也可以在服务中设置插件作为选项"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">(</span>\n        <span class="token string">"github.com/micro/go-micro/v2"</span>\n        <span class="token comment" spellcheck="true">// etcd v3 registry</span>\n        <span class="token string">"github.com/micro/go-plugins/registry/etcdv3"</span>\n        <span class="token comment" spellcheck="true">// nats transport</span>\n        <span class="token string">"github.com/micro/go-plugins/transport/nats"</span>\n        <span class="token comment" spellcheck="true">// kafka broker</span>\n        <span class="token string">"github.com/micro/go-plugins/broker/kafka"</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tregistry <span class="token operator">:=</span> etcdv3<span class="token punctuation">.</span><span class="token function">NewRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tbroker <span class="token operator">:=</span> kafka<span class="token punctuation">.</span><span class="token function">NewBroker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\ttransport <span class="token operator">:=</span> nats<span class="token punctuation">.</span><span class="token function">NewTransport</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    service <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n            micro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            micro<span class="token punctuation">.</span><span class="token function">Registry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            micro<span class="token punctuation">.</span><span class="token function">Broker</span><span class="token punctuation">(</span>broker<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            micro<span class="token punctuation">.</span><span class="token function">Transport</span><span class="token punctuation">(</span>transport<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'import (\n        "github.com/micro/go-micro/v2"\n        // etcd v3 registry\n        "github.com/micro/go-plugins/registry/etcdv3"\n        // nats transport\n        "github.com/micro/go-plugins/transport/nats"\n        // kafka broker\n        "github.com/micro/go-plugins/broker/kafka"\n)\n\nfunc main() {\n\tregistry := etcdv3.NewRegistry()\n\tbroker := kafka.NewBroker()\n\ttransport := nats.NewTransport()\n\n    service := micro.NewService(\n            micro.Name("greeter"),\n            micro.Registry(registry),\n            micro.Broker(broker),\n            micro.Transport(transport),\n    )\n\n\tservice.Init()\n\tservice.Run()\n}']],["h3","编写插件"],["p","插件是构建在 Go 接口之上的的概念。每个包都维护着高度抽象的接口。简单实现接口并把它作为选项传入服务。"],["p","服务发现的接口称作",["a",{title:null,href:"https://pkg.go.dev/github.com/micro/go-micro/v2/registry#Registry"},"注册（Registry）"],"。任何实现了这个接口的都可以当作注册中心。同样，对于其它包的实现也是如此。"],["pre",{lang:"go",highlighted:'<span class="token keyword">type</span> Registry <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n    <span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">*</span>Service<span class="token punctuation">,</span> <span class="token operator">...</span>RegisterOption<span class="token punctuation">)</span> <span class="token builtin">error</span>\n    <span class="token function">Deregister</span><span class="token punctuation">(</span><span class="token operator">*</span>Service<span class="token punctuation">)</span> <span class="token builtin">error</span>\n    <span class="token function">GetService</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Service<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>\n    <span class="token function">ListServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Service<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>\n    <span class="token function">Watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Watcher<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>\n    <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>'},["code","type Registry interface {\n    Register(*Service, ...RegisterOption) error\n    Deregister(*Service) error\n    GetService(string) ([]*Service, error)\n    ListServices() ([]*Service, error)\n    Watch() (Watcher, error)\n    String() string\n}"]],["p","浏览",["a",{title:null,href:"https://github.com/micro/go-plugins"},"go-plugins"],"获取更多优秀实现内容。"],["h2","包装器（Wrappers）"],["p","Go-micro 中有中间件即包装器的概念。客户端或者处理器可以使用装饰模式包装起来。"],["h3","处理器"],["p","这里演示服务处理器包装器，它负责打印传入请求的日志。 Here's an example service handler wrapper which logs the incoming request"],["pre",{lang:"go",highlighted:'<span class="token comment" spellcheck="true">// 实现server.HandlerWrapper接口</span>\n<span class="token keyword">func</span> <span class="token function">logWrapper</span><span class="token punctuation">(</span>fn server<span class="token punctuation">.</span>HandlerFunc<span class="token punctuation">)</span> server<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req server<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> rsp <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%v] server request: %s"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">Endpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">,</span> rsp<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>'},["code",'// 实现server.HandlerWrapper接口\nfunc logWrapper(fn server.HandlerFunc) server.HandlerFunc {\n\treturn func(ctx context.Context, req server.Request, rsp interface{}) error {\n\t\tfmt.Printf("[%v] server request: %s", time.Now(), req.Endpoint())\n\t\treturn fn(ctx, req, rsp)\n\t}\n}']],["p","可以在创建服务时初始化"],["pre",{lang:"go",highlighted:'service <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token comment" spellcheck="true">// 把handler包起来</span>\n\tmicro<span class="token punctuation">.</span><span class="token function">WrapHandler</span><span class="token punctuation">(</span>logWrapper<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>'},["code",'service := micro.NewService(\n\tmicro.Name("greeter"),\n\t// 把handler包起来\n\tmicro.WrapHandler(logWrapper),\n)']],["h3","客户端"],["p","下面演示客户端包装器，它负责打印请求创建的日志。 Here's an example of a client wrapper which logs requests made"],["pre",{lang:"go",highlighted:'<span class="token keyword">type</span> logWrapper <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tclient<span class="token punctuation">.</span>Client\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>logWrapper<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req client<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> rsp <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span>client<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[wrapper] client request to service: %s method: %s\\n"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">Endpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">return</span> l<span class="token punctuation">.</span>Client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">,</span> rsp<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// 实现client.Wrapper，充当日志包装器</span>\n<span class="token keyword">func</span> <span class="token function">logWrap</span><span class="token punctuation">(</span>c client<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> client<span class="token punctuation">.</span>Client <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token operator">&amp;</span>logWrapper<span class="token punctuation">{</span>c<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>'},["code",'type logWrapper struct {\n\tclient.Client\n}\n\nfunc (l *logWrapper) Call(ctx context.Context, req client.Request, rsp interface{}, opts ...client.CallOption) error {\n\tfmt.Printf("[wrapper] client request to service: %s method: %s\\n", req.Service(), req.Endpoint())\n\treturn l.Client.Call(ctx, req, rsp)\n}\n\n// 实现client.Wrapper，充当日志包装器\nfunc logWrap(c client.Client) client.Client {\n\treturn &logWrapper{c}\n}']],["p","可以在创建服务时初始化"],["pre",{lang:"go",highlighted:'service <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token comment" spellcheck="true">// 把客户端包起来</span>\n\tmicro<span class="token punctuation">.</span><span class="token function">WrapClient</span><span class="token punctuation">(</span>logWrap<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>'},["code",'service := micro.NewService(\n\tmicro.Name("greeter"),\n\t// 把客户端包起来\n\tmicro.WrapClient(logWrap),\n)']],["h2","相关示例"],["p","服务示例可以在",["a",{title:null,href:"https://github.com/micro/examples/tree/master/service"},["strong","examples/service"]],"中找到，Function 则到",["a",{title:null,href:"https://github.com/micro/examples/tree/master/function"},["strong","examples/function"]],"查看"],["p",["a",{title:null,href:"https://github.com/micro/examples"},["strong","examples"]],"的 Github 目录下包含了各种示例，比如中间件/包装器，选择过滤器，发布/订阅，gRPC，插件等。"],["p","greeter 示例的完整代码",["a",{title:null,href:"https://github.com/micro/examples/tree/master/greeter"},["strong","examples/greeter"]],"。"],["p","所有的示例都可以在 GitHub 仓库中找到。"],["p","观看",["a",{title:null,href:"https://www.youtube.com/watch?v=xspaDovwk34"},"Golang 英国会议 2016"],"视频，获得更高级的视角。"]],meta:{order:15,title:"Go Micro",filename:"docs/stack-rpc/go-micro.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#概览",title:"概览"},"概览"]],["li",["a",{className:"bisheng-toc-h2",href:"#特性",title:"特性"},"特性"]],["li",["a",{className:"bisheng-toc-h2",href:"#安装-protobuf",title:"安装 protobuf"},"安装 protobuf"]],["li",["a",{className:"bisheng-toc-h2",href:"#服务发现",title:"服务发现"},"服务发现"]],["li",["a",{className:"bisheng-toc-h2",href:"#编写服务",title:"编写服务"},"编写服务"]],["li",["a",{className:"bisheng-toc-h2",href:"#编写-Function",title:"编写 Function"},"编写 Function"]],["li",["a",{className:"bisheng-toc-h2",href:"#发布与订阅",title:"发布与订阅"},"发布与订阅"]],["li",["a",{className:"bisheng-toc-h2",href:"#插件",title:"插件"},"插件"]],["li",["a",{className:"bisheng-toc-h2",href:"#包装器（Wrappers）",title:"包装器（Wrappers）"},"包装器（Wrappers）"]],["li",["a",{className:"bisheng-toc-h2",href:"#相关示例",title:"相关示例"},"相关示例"]]]}}}]);