(window.webpackJsonp=window.webpackJsonp||[]).push([[209],{3203:function(n,s){n.exports={content:["article",["p","本篇主要帮助大家在 go-micro 服务中使用 grpc 网关。"],["p","GRPC 网关",["a",{title:null,href:"https://github.com/grpc-ecosystem/grpc-gateway"},"grpc-gateway"],"是",["a",{title:null,href:"http://github.com/google/protobuf"},"protoc"],"的一个插件。它遵循",["a",{title:null,href:"http://github.com/grpc/grpc-common"},"gRPC"],"中的服务定义，生成反向代理服务，这个代理就会把 RESTful 风格的 JSON API 转成 gRPC 请求。"],["p","我们使用",["a",{title:null,href:"https://github.com/micro/go-grpc"},"go-grpc"],"写后台服务。Go-GRPC 是客户端与服务端的 go-micro、grpc 插件包装器。当调用",["a",{title:null,href:"https://godoc.org/github.com/micro/go-grpc#NewService"},"grpc.NewService"],"时，它会返回",["a",{title:null,href:"https://pkg.go.dev/github.com/micro/go-micro/v2#Service"},"micro.Service"],"服务。"],["h2","代码"],["p","可以在",["a",{title:null,href:"https://github.com/micro/examples/tree/master/grpc"},"examples/grpc"],"中查找相关代码。"],["h2","预置条件"],["p","我们需要下面准备工作："],["h3","安装 protobuf"],["pre",{lang:null,highlighted:'mkdir tmp\ncd tmp\ngit clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>google<span class="token operator">/</span>protobuf\ncd protobuf\n<span class="token punctuation">.</span><span class="token operator">/</span>autogen<span class="token punctuation">.</span>sh\n<span class="token punctuation">.</span><span class="token operator">/</span>configure\nmake\nmake check\nsudo make install'},["code","mkdir tmp\ncd tmp\ngit clone https://github.com/google/protobuf\ncd protobuf\n./autogen.sh\n./configure\nmake\nmake check\nsudo make install"]],["h3","安装插件"],["pre",{lang:null,highlighted:'go get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>grpc<span class="token operator">-</span>ecosystem<span class="token operator">/</span>grpc<span class="token operator">-</span>gateway<span class="token operator">/</span>protoc<span class="token operator">-</span>gen<span class="token operator">-</span>grpc<span class="token operator">-</span>gateway\ngo get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>micro<span class="token operator">/</span>protobuf<span class="token operator">/</span>protoc<span class="token operator">-</span>gen<span class="token operator">-</span>go'},["code","go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway\ngo get -u github.com/micro/protobuf/protoc-gen-go"]],["h2","Greeter Service"],["p","例子中我们使用",["a",{title:null,href:"https://github.com/micro/go-grpc"},"go-grpc"],"创建了简单的",["strong","greeter"],"微服务。"],["p","下面的 proto 文件的代码："],["pre",{lang:"proto",highlighted:'syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token comment" spellcheck="true">;</span>\n\npackage go<span class="token punctuation">.</span>micro<span class="token punctuation">.</span>srv<span class="token punctuation">.</span>greeter<span class="token comment" spellcheck="true">;</span>\n\nservice Say {\n\trpc <span class="token function">Hello</span><span class="token punctuation">(</span>Request<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>Response<span class="token punctuation">)</span> {}\n}\n\nmessage Request {\n\tstring name <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n}\n\nmessage Response {\n\tstring msg <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n}'},["code",'syntax = "proto3";\n\npackage go.micro.srv.greeter;\n\nservice Say {\n\trpc Hello(Request) returns (Response) {}\n}\n\nmessage Request {\n\tstring name = 1;\n}\n\nmessage Response {\n\tstring msg = 1;\n}']],["p","服务的 Go 代码："],["pre",{lang:null,highlighted:'package main\n\nimport <span class="token punctuation">(</span>\n\t<span class="token string">"log"</span>\n\t<span class="token string">"time"</span>\n\n\thello <span class="token string">"github.com/micro/examples/greeter/srv/proto/hello"</span>\n\t<span class="token string">"github.com/micro/go-grpc"</span>\n\t<span class="token string">"github.com/micro/go-micro/v2"</span>\n\n\t<span class="token string">"golang.org/x/net/context"</span>\n<span class="token punctuation">)</span>\n\ntype Say struct{}\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Say<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>hello<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> rsp <span class="token operator">*</span>hello<span class="token punctuation">.</span>Response<span class="token punctuation">)</span> error {\n\tlog<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"Received Say.Hello request"</span><span class="token punctuation">)</span>\n\trsp<span class="token punctuation">.</span>Msg <span class="token operator">=</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>Name\n\treturn nil\n}\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n\tservice <span class="token punctuation">:</span><span class="token operator">=</span> grpc<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\t\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"go.micro.srv.greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\tmicro<span class="token punctuation">.</span><span class="token function">RegisterTTL</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\tmicro<span class="token punctuation">.</span><span class="token function">RegisterInterval</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n\n\t<span class="token operator">/</span><span class="token operator">/</span> optionally setup command line usage\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token operator">/</span><span class="token operator">/</span> Register Handlers\n\thello<span class="token punctuation">.</span><span class="token function">RegisterSayHandler</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>Say<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\t<span class="token operator">/</span><span class="token operator">/</span> Run server\n\t<span class="token keyword">if</span> err <span class="token punctuation">:</span><span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">; err != nil {</span>\n\t\tlog<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t}\n}'},["code",'package main\n\nimport (\n\t"log"\n\t"time"\n\n\thello "github.com/micro/examples/greeter/srv/proto/hello"\n\t"github.com/micro/go-grpc"\n\t"github.com/micro/go-micro/v2"\n\n\t"golang.org/x/net/context"\n)\n\ntype Say struct{}\n\nfunc (s *Say) Hello(ctx context.Context, req *hello.Request, rsp *hello.Response) error {\n\tlog.Print("Received Say.Hello request")\n\trsp.Msg = "Hello " + req.Name\n\treturn nil\n}\n\nfunc main() {\n\tservice := grpc.NewService(\n\t\tmicro.Name("go.micro.srv.greeter"),\n\t\tmicro.RegisterTTL(time.Second*30),\n\t\tmicro.RegisterInterval(time.Second*10),\n\t)\n\n\t// optionally setup command line usage\n\tservice.Init()\n\n\t// Register Handlers\n\thello.RegisterSayHandler(service.Server(), new(Say))\n\n\t// Run server\n\tif err := service.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}']],["h2","GRPC Gateway"],["p","GRPC 网关使用相同的 proto 文件配上 http 选项提供服务"],["pre",{lang:"proto",highlighted:'syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token comment" spellcheck="true">;</span>\n\npackage greeter<span class="token comment" spellcheck="true">;</span>\n\nimport <span class="token string">"google/api/annotations.proto"</span><span class="token comment" spellcheck="true">;</span>\n\nservice Say {\n\trpc <span class="token function">Hello</span><span class="token punctuation">(</span>Request<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>Response<span class="token punctuation">)</span> {\n\t\toption <span class="token punctuation">(</span>google<span class="token punctuation">.</span>api<span class="token punctuation">.</span>http<span class="token punctuation">)</span> <span class="token operator">=</span> {\n\t\t\tpost<span class="token punctuation">:</span> <span class="token string">"/greeter/hello"</span>\n\t\t\tbody<span class="token punctuation">:</span> <span class="token string">"*"</span>\n\t\t}<span class="token comment" spellcheck="true">;</span>\n\t}\n}\n\nmessage Request {\n\tstring name <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n}\n\nmessage Response {\n\tstring msg <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n}'},["code",'syntax = "proto3";\n\npackage greeter;\n\nimport "google/api/annotations.proto";\n\nservice Say {\n\trpc Hello(Request) returns (Response) {\n\t\toption (google.api.http) = {\n\t\t\tpost: "/greeter/hello"\n\t\t\tbody: "*"\n\t\t};\n\t}\n}\n\nmessage Request {\n\tstring name = 1;\n}\n\nmessage Response {\n\tstring msg = 1;\n}']],["p","通过下面的 proto 命令生成 grpc 的存根和反向代理"],["pre",{lang:null,highlighted:'protoc <span class="token operator">-</span>I<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>include <span class="token operator">-</span>I<span class="token punctuation">.</span> \\\n  <span class="token operator">-</span>I<span class="token variable">$GOPATH</span><span class="token operator">/</span>src \\\n  <span class="token operator">-</span>I<span class="token variable">$GOPATH</span><span class="token operator">/</span>src<span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>grpc<span class="token operator">-</span>ecosystem<span class="token operator">/</span>grpc<span class="token operator">-</span>gateway<span class="token operator">/</span>third_party<span class="token operator">/</span>googleapis \\\n  <span class="token operator">-</span><span class="token operator">-</span>go_out<span class="token operator">=</span>plugins<span class="token operator">=</span>grpc<span class="token punctuation">:</span><span class="token punctuation">.</span> \\\n  path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>your_service<span class="token punctuation">.</span>proto'},["code","protoc -I/usr/local/include -I. \\\n  -I$GOPATH/src \\\n  -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\\n  --go_out=plugins=grpc:. \\\n  path/to/your_service.proto"]],["pre",{lang:null,highlighted:'protoc <span class="token operator">-</span>I<span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>include <span class="token operator">-</span>I<span class="token punctuation">.</span> \\\n  <span class="token operator">-</span>I<span class="token variable">$GOPATH</span><span class="token operator">/</span>src \\\n  <span class="token operator">-</span>I<span class="token variable">$GOPATH</span><span class="token operator">/</span>src<span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>grpc<span class="token operator">-</span>ecosystem<span class="token operator">/</span>grpc<span class="token operator">-</span>gateway<span class="token operator">/</span>third_party<span class="token operator">/</span>googleapis \\\n  <span class="token operator">-</span><span class="token operator">-</span>grpc<span class="token operator">-</span>gateway_out<span class="token operator">=</span>logtostderr<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">:</span><span class="token punctuation">.</span> \\\n  path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>your_service<span class="token punctuation">.</span>proto'},["code","protoc -I/usr/local/include -I. \\\n  -I$GOPATH/src \\\n  -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\\n  --grpc-gateway_out=logtostderr=true:. \\\n  path/to/your_service.proto"]],["p","在下面的代码中我们写了一个简单的问候（greeter）服务 API。类似的代码也会用来注册其它的端点。切记，网关需要端点地址及服务。"],["pre",{lang:null,highlighted:'package main\n\nimport <span class="token punctuation">(</span>\n\t<span class="token string">"flag"</span>\n\t<span class="token string">"net/http"</span>\n\n\t<span class="token string">"github.com/golang/glog"</span>\n\t<span class="token string">"github.com/grpc-ecosystem/grpc-gateway/runtime"</span>\n\t<span class="token string">"golang.org/x/net/context"</span>\n\t<span class="token string">"google.golang.org/grpc"</span>\n\n\thello <span class="token string">"github.com/micro/examples/grpc/gateway/proto/hello"</span>\n<span class="token punctuation">)</span>\n\nvar <span class="token punctuation">(</span>\n\t<span class="token operator">/</span><span class="token operator">/</span> the go<span class="token punctuation">.</span>micro<span class="token punctuation">.</span>srv<span class="token punctuation">.</span>greeter address\n\tendpoint <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"endpoint"</span><span class="token punctuation">,</span> <span class="token string">"localhost:9090"</span><span class="token punctuation">,</span> <span class="token string">"go.micro.srv.greeter address"</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> error {\n\tctx <span class="token punctuation">:</span><span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tctx<span class="token punctuation">,</span> cancel <span class="token punctuation">:</span><span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>\n\tdefer <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\tmux <span class="token punctuation">:</span><span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\topts <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>grpc<span class="token punctuation">.</span>DialOption{grpc<span class="token punctuation">.</span><span class="token function">WithInsecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>}\n\n\terr <span class="token punctuation">:</span><span class="token operator">=</span> hello<span class="token punctuation">.</span><span class="token function">RegisterSayHandlerFromEndpoint</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> mux<span class="token punctuation">,</span> <span class="token operator">*</span>endpoint<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err !<span class="token operator">=</span> nil {\n\t\treturn err\n\t}\n\n\treturn http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> mux<span class="token punctuation">)</span>\n}\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n\tflag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\tdefer glog<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">if</span> err <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">; err != nil {</span>\n\t\tglog<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t}\n}'},["code",'package main\n\nimport (\n\t"flag"\n\t"net/http"\n\n\t"github.com/golang/glog"\n\t"github.com/grpc-ecosystem/grpc-gateway/runtime"\n\t"golang.org/x/net/context"\n\t"google.golang.org/grpc"\n\n\thello "github.com/micro/examples/grpc/gateway/proto/hello"\n)\n\nvar (\n\t// the go.micro.srv.greeter address\n\tendpoint = flag.String("endpoint", "localhost:9090", "go.micro.srv.greeter address")\n)\n\nfunc run() error {\n\tctx := context.Background()\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\n\tmux := runtime.NewServeMux()\n\topts := []grpc.DialOption{grpc.WithInsecure()}\n\n\terr := hello.RegisterSayHandlerFromEndpoint(ctx, mux, *endpoint, opts)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn http.ListenAndServe(":8080", mux)\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tdefer glog.Flush()\n\n\tif err := run(); err != nil {\n\t\tglog.Fatal(err)\n\t}\n}']],["h2","运行示例"],["p","现在运行 greeter 服务，指定",["code","mdns"],"参数，因为现在我们还没有注册中心。"],["pre",{lang:null,highlighted:'go run examples<span class="token operator">/</span>grpc<span class="token operator">/</span>greeter<span class="token operator">/</span>srv<span class="token operator">/</span>main<span class="token punctuation">.</span>go <span class="token operator">-</span><span class="token operator">-</span>registry<span class="token operator">=</span>mdns <span class="token operator">-</span><span class="token operator">-</span>server_address<span class="token operator">=</span>localhost<span class="token punctuation">:</span><span class="token number">9090</span>'},["code","go run examples/grpc/greeter/srv/main.go --registry=mdns --server_address=localhost:9090"]],["p","运行网关程序，把 greeter 服务所有端点都放在",["code","localhost:9090"],"下"],["pre",{lang:null,highlighted:'go run examples<span class="token operator">/</span>grpc<span class="token operator">/</span>gateway<span class="token operator">/</span>main<span class="token punctuation">.</span>go'},["code","go run examples/grpc/gateway/main.go"]],["p","用 Curl 命令请求网关"],["pre",{lang:null,highlighted:'curl <span class="token operator">-</span>d <span class="token string">\'{"name": "john"}\'</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>greeter<span class="token operator">/</span>hello'},["code",'curl -d \'{"name": "john"}\' http://localhost:8080/greeter/hello']],["h2","局限性"],["p","我们需要向 gRPC 网关提供使用了服务发现、动态路由、负载均衡的后台 micro api 服务所在的地址。这降低了集成网关的通用性。"],["p","参考",["a",{title:null,href:"https://github.com/micro/micro"},"github.com/micro/micro"],"了解更多。"]],meta:{order:17,title:"GRPC 网关",filename:"docs/stack-rpc/grpc-gateway.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#代码",title:"代码"},"代码"]],["li",["a",{className:"bisheng-toc-h2",href:"#预置条件",title:"预置条件"},"预置条件"]],["li",["a",{className:"bisheng-toc-h2",href:"#Greeter-Service",title:"Greeter Service"},"Greeter Service"]],["li",["a",{className:"bisheng-toc-h2",href:"#GRPC-Gateway",title:"GRPC Gateway"},"GRPC Gateway"]],["li",["a",{className:"bisheng-toc-h2",href:"#运行示例",title:"运行示例"},"运行示例"]],["li",["a",{className:"bisheng-toc-h2",href:"#局限性",title:"局限性"},"局限性"]]]}}}]);