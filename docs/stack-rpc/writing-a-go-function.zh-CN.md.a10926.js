(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{3214:function(n,s){n.exports={content:["article",["p","本篇是指导大家使用 go-micro 的 Function 功能，Function 是执行一次的服务。（译者按：这里 Function 并不等同与平常我们编写的函数，而是只执行一次的服务所以我没有直接翻译，以免引起误解）"],["p","如果想先从更高的角度了解相关的工具集，可以查看博客",["a",{title:null,href:"https://micro.mu/blog/2016/03/20/micro.html"},"https://micro.mu/blog/2016/03/20/micro.html"],"。"],["h2","先写一个 Function"],["p",["a",{title:null,href:"https://pkg.go.dev/github.com/micro/go-micro/v2#Function"},"Function"],"作为顶级的接口，它是 go-micro 中函数式编程模型主要组件。它封装服务接口，并提供执行一次函数的能力。"],["pre",{lang:"go",highlighted:'<span class="token comment" spellcheck="true">// Function 是只执行一次的函数</span>\n<span class="token keyword">type</span> Function <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n\t<span class="token comment" spellcheck="true">// Inherits Service interface</span>\n\tService\n\t<span class="token comment" spellcheck="true">// Done signals to complete execution</span>\n\t<span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n\t<span class="token comment" spellcheck="true">// Handle registers an RPC handler</span>\n\t<span class="token function">Handle</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n\t<span class="token comment" spellcheck="true">// Subscribe registers a subscriber</span>\n\t<span class="token function">Subscribe</span><span class="token punctuation">(</span>topic <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>\n<span class="token punctuation">}</span>'},["code","// Function 是只执行一次的函数\ntype Function interface {\n\t// Inherits Service interface\n\tService\n\t// Done signals to complete execution\n\tDone() error\n\t// Handle registers an RPC handler\n\tHandle(v interface{}) error\n\t// Subscribe registers a subscriber\n\tSubscribe(topic string, v interface{}) error\n}"]],["h3","1. 初始化"],["p","Function 使用",["code","micro.NewFunction"],"构建。"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token string">"github.com/micro/go-micro/v2"</span>\n\nfunction <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>'},["code",'import "github.com/micro/go-micro/v2"\n\nfunction := micro.NewFunction()']],["p","构建时也可以传入选项参数。"],["pre",{lang:"go",highlighted:'function <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewFunction</span><span class="token punctuation">(</span>\n        micro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        micro<span class="token punctuation">.</span><span class="token function">Version</span><span class="token punctuation">(</span><span class="token string">"latest"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>'},["code",'function := micro.NewFunction(\n        micro.Name("greeter"),\n        micro.Version("latest"),\n)']],["p","可选参数",["a",{title:null,href:"https://pkg.go.dev/github.com/micro/go-micro/v2#Option"},"参考"],"。"],["p","Go micro 也可以通过",["code","micro.Flags"],"解析命令行的传参。"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">(</span>\n        <span class="token string">"github.com/micro/cli"</span>\n        <span class="token string">"github.com/micro/go-micro/v2"</span>\n<span class="token punctuation">)</span>\n\nfunction <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewFunction</span><span class="token punctuation">(</span>\n        micro<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span>\n                cli<span class="token punctuation">.</span>StringFlag<span class="token punctuation">{</span>\n                        Name<span class="token punctuation">:</span>  <span class="token string">"environment"</span><span class="token punctuation">,</span>\n                        Usage<span class="token punctuation">:</span> <span class="token string">"The environment"</span><span class="token punctuation">,</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n<span class="token punctuation">)</span>'},["code",'import (\n        "github.com/micro/cli"\n        "github.com/micro/go-micro/v2"\n)\n\nfunction := micro.NewFunction(\n        micro.Flags(\n                cli.StringFlag{\n                        Name:  "environment",\n                        Usage: "The environment",\n                },\n        )\n)']],["p","命令行标记参数可以使用",["code","function.Init"],"解析。增加参数可以使用",["code","micro.Action"],"。"],["pre",{lang:"go",highlighted:'function<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>\n        micro<span class="token punctuation">.</span><span class="token function">Action</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cli<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                env <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">StringFlag</span><span class="token punctuation">(</span><span class="token string">"environment"</span><span class="token punctuation">)</span>\n                <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>\n                        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Environment set to"</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>'},["code",'function.Init(\n        micro.Action(func(c *cli.Context) {\n                env := c.StringFlag("environment")\n                if len(env) > 0 {\n                        fmt.Println("Environment set to", env)\n                }\n        }),\n)']],["p","Go Micro 提供了一些预定义的参数标记，这些标记在执行",["code","function.Init"],"时解析。所有预定义的标记参数可以",["a",{title:null,href:"https://pkg.go.dev/github.com/micro/go-micro/v2/cmd#pkg-variables"},"参考"],"。"],["h3","2. 定义 API"],["p","我们使用 protobuf 文件来定义服务的 API 接口。使用 protobuf 可以非常方便去严格定义 API，提供服务端与客户端双边具体一致的类型。"],["p","greeter.proto"],["pre",{lang:"proto",highlighted:'syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token comment" spellcheck="true">;</span>\n\nservice Greeter {\n\trpc <span class="token function">Hello</span><span class="token punctuation">(</span>HelloRequest<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>HelloResponse<span class="token punctuation">)</span> {}\n}\n\nmessage HelloRequest {\n\tstring name <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">;</span>\n}\n\nmessage HelloResponse {\n\tstring greeting <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">;</span>\n}'},["code",'syntax = "proto3";\n\nservice Greeter {\n\trpc Hello(HelloRequest) returns (HelloResponse) {}\n}\n\nmessage HelloRequest {\n\tstring name = 1;\n}\n\nmessage HelloResponse {\n\tstring greeting = 2;\n}']],["p","我们定义了一个服务叫做 Greeter 的 Function 处理器，它有一个接收 HelloRequest 并返回 HelloResponse 的 Hello 方法。"],["h3","3. 生成 API 接口"],["p","我们需要",["strong","protoc"],"和",["strong","protoc-gen-go"],"来生成 protobuf 代码文件，它们负责生成定义的 go 代码实现。"],["p","Go-micro 使用代码生成器生成客户端存根方法，这样可以像 gRPC 减少模板方法。这一步需要",["a",{title:null,href:"https://github.com/golang/protobuf"},"golang/protobuf"],"fork 出来的插件",["a",{title:null,href:"https://github.com/micro/protobuf"},"github.com/micro/protobuf"],"."],["pre",{lang:"shell",highlighted:'go get github<span class="token punctuation">.</span>com<span class="token operator">/</span>micro<span class="token operator">/</span>protobuf<span class="token operator">/</span>{proto<span class="token punctuation">,</span>protoc<span class="token operator">-</span>gen<span class="token operator">-</span>go}\nprotoc <span class="token operator">-</span><span class="token operator">-</span>go_out<span class="token operator">=</span>plugins<span class="token operator">=</span>micro<span class="token punctuation">:</span><span class="token punctuation">.</span> greeter<span class="token punctuation">.</span>proto'},["code","go get github.com/micro/protobuf/{proto,protoc-gen-go}\nprotoc --go_out=plugins=micro:. greeter.proto"]],["p","生成的类现在可以引入",["strong","handler"],"中，在服务或客户端来创建请求了。"],["p","下面是代码生成器生成的一部分代码。"],["pre",{lang:"go",highlighted:'<span class="token keyword">type</span> HelloRequest <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tName <span class="token builtin">string</span> <span class="token string">`protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> HelloResponse <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tGreeting <span class="token builtin">string</span> <span class="token string">`protobuf:"bytes,2,opt,name=greeting" json:"greeting,omitempty"`</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// 定义Greeter客户端的接口</span>\n\n<span class="token keyword">type</span> GreeterClient <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n\t<span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>HelloRequest<span class="token punctuation">,</span> opts <span class="token operator">...</span>client<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>HelloResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> greeterClient <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tc           client<span class="token punctuation">.</span>Client\n\tserviceName <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">NewGreeterClient</span><span class="token punctuation">(</span>serviceName <span class="token builtin">string</span><span class="token punctuation">,</span> c client<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> GreeterClient <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tc <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\tserviceName <span class="token operator">=</span> <span class="token string">"greeter"</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token operator">&amp;</span>greeterClient<span class="token punctuation">{</span>\n\t\tc<span class="token punctuation">:</span>           c<span class="token punctuation">,</span>\n\t\tserviceName<span class="token punctuation">:</span> serviceName<span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>greeterClient<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>HelloRequest<span class="token punctuation">,</span> opts <span class="token operator">...</span>client<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>HelloResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\treq <span class="token operator">:=</span> c<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>serviceName<span class="token punctuation">,</span> <span class="token string">"Greeter.Hello"</span><span class="token punctuation">,</span> in<span class="token punctuation">)</span>\n\tout <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>HelloResponse<span class="token punctuation">)</span>\n\terr <span class="token operator">:=</span> c<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">,</span> out<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> out<span class="token punctuation">,</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// Greeter的服务端API</span>\n\n<span class="token keyword">type</span> GreeterHandler <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n\t<span class="token function">Hello</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">*</span>HelloRequest<span class="token punctuation">,</span> <span class="token operator">*</span>HelloResponse<span class="token punctuation">)</span> <span class="token builtin">error</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">RegisterGreeterHandler</span><span class="token punctuation">(</span>s server<span class="token punctuation">.</span>Server<span class="token punctuation">,</span> hdlr GreeterHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\ts<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">NewHandler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Greeter<span class="token punctuation">{</span>hdlr<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'type HelloRequest struct {\n\tName string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`\n}\n\ntype HelloResponse struct {\n\tGreeting string `protobuf:"bytes,2,opt,name=greeting" json:"greeting,omitempty"`\n}\n\n// 定义Greeter客户端的接口\n\ntype GreeterClient interface {\n\tHello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error)\n}\n\ntype greeterClient struct {\n\tc           client.Client\n\tserviceName string\n}\n\nfunc NewGreeterClient(serviceName string, c client.Client) GreeterClient {\n\tif c == nil {\n\t\tc = client.NewClient()\n\t}\n\tif len(serviceName) == 0 {\n\t\tserviceName = "greeter"\n\t}\n\treturn &greeterClient{\n\t\tc:           c,\n\t\tserviceName: serviceName,\n\t}\n}\n\nfunc (c *greeterClient) Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error) {\n\treq := c.c.NewRequest(c.serviceName, "Greeter.Hello", in)\n\tout := new(HelloResponse)\n\terr := c.c.Call(ctx, req, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// Greeter的服务端API\n\ntype GreeterHandler interface {\n\tHello(context.Context, *HelloRequest, *HelloResponse) error\n}\n\nfunc RegisterGreeterHandler(s server.Server, hdlr GreeterHandler) {\n\ts.Handle(s.NewHandler(&Greeter{hdlr}))\n}']],["h3","4. 实现处理器"],["p","服务端需要注册",["strong","handlers"],"，这样才能提供服务并接收请求。处理器相当于是一个拥有公共方法的公共类，它需要符合签名",["code","func(ctx context.Context, req interface{}, rsp interface{}) error"],"。"],["p","通过上面的内容，我们看到，Greeter interface 的签名的看上去就是这样："],["pre",{lang:"go",highlighted:'<span class="token keyword">type</span> GreeterHandler <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n        <span class="token function">Hello</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token operator">*</span>HelloRequest<span class="token punctuation">,</span> <span class="token operator">*</span>HelloResponse<span class="token punctuation">)</span> <span class="token builtin">error</span>\n<span class="token punctuation">}</span>'},["code","type GreeterHandler interface {\n        Hello(context.Context, *HelloRequest, *HelloResponse) error\n}"]],["p","Greeter 处理器实现。"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> proto <span class="token string">"github.com/micro/examples/service/proto"</span>\n\n<span class="token keyword">type</span> Greeter <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Greeter<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">,</span> rsp <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelloResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n\trsp<span class="token punctuation">.</span>Greeting <span class="token operator">=</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>Name\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>'},["code",'import proto "github.com/micro/examples/service/proto"\n\ntype Greeter struct{}\n\nfunc (g *Greeter) Hello(ctx context.Context, req *proto.HelloRequest, rsp *proto.HelloResponse) error {\n\trsp.Greeting = "Hello " + req.Name\n\treturn nil\n}']],["p","处理器注册过程和",["code","http.Handler"],"很像。"],["pre",{lang:null,highlighted:'function <span class="token punctuation">:</span><span class="token operator">=</span> micro<span class="token punctuation">.</span><span class="token function">NewFunction</span><span class="token punctuation">(</span>\n\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\nproto<span class="token punctuation">.</span><span class="token function">RegisterGreeterHandler</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>Greeter<span class="token punctuation">)</span><span class="token punctuation">)</span>'},["code",'function := micro.NewFunction(\n\tmicro.Name("greeter"),\n)\n\nproto.RegisterGreeterHandler(service.Server(), new(Greeter))']],["p","另外，Function 接口也提供更简单的注册方式。"],["pre",{lang:null,highlighted:'function <span class="token punctuation">:</span><span class="token operator">=</span> micro<span class="token punctuation">.</span><span class="token function">NewFunction</span><span class="token punctuation">(</span>\n        micro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\nfunction<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>Greeter<span class="token punctuation">)</span><span class="token punctuation">)</span>'},["code",'function := micro.NewFunction(\n        micro.Name("greeter"),\n)\n\nfunction.Handle(new(Greeter))']],["p","也可以使用 Subscribe 方法注册成异步的订阅者。"],["h3","5. 运行 Function"],["p","运行 Function 可以通过",["code","function.Run"],"。这样它会绑定到配置中指定的地址（默认使用 RFC1918 规则来分配并生成随机端口），然后开始侦听端口。"],["p","另外，这一步会在服务启动时向注册中心",["code","注册"],"，并在服务接收到关闭信号时",["code","卸载"],"。"],["pre",{lang:"go",highlighted:'<span class="token keyword">if</span> err <span class="token operator">:=</span> function<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code","if err := function.Run(); err != nil {\n\tlog.Fatal(err)\n}"]],["p","有接受服务请求后，这人 Function 就会退出。可以使用",["a",{title:null,href:"https://micro.mu/docs/run.html"},"micro run"]," 来管理 Funtion 的生命周期。完整的例子查看：",["a",{title:null,href:"https://github.com/micro/examples/tree/master/function"},"examples/function"],"."],["h3","6. 完整的函数"],["p",["br"],"\ngreeter.go"],["pre",{lang:"go",highlighted:'<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n        <span class="token string">"log"</span>\n\n        <span class="token string">"github.com/micro/go-micro/v2"</span>\n        proto <span class="token string">"github.com/micro/examples/function/proto"</span>\n\n        <span class="token string">"golang.org/x/net/context"</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> Greeter <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Greeter<span class="token punctuation">)</span> <span class="token function">Hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">,</span> rsp <span class="token operator">*</span>proto<span class="token punctuation">.</span>HelloResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>\n        rsp<span class="token punctuation">.</span>Greeting <span class="token operator">=</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>Name\n        <span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        function <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewFunction</span><span class="token punctuation">(</span>\n                micro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                micro<span class="token punctuation">.</span><span class="token function">Version</span><span class="token punctuation">(</span><span class="token string">"latest"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n\n        function<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t    function<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>Greeter<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> err <span class="token operator">:=</span> function<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n                log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>'},["code",'package main\n\nimport (\n        "log"\n\n        "github.com/micro/go-micro/v2"\n        proto "github.com/micro/examples/function/proto"\n\n        "golang.org/x/net/context"\n)\n\ntype Greeter struct{}\n\nfunc (g *Greeter) Hello(ctx context.Context, req *proto.HelloRequest, rsp *proto.HelloResponse) error {\n        rsp.Greeting = "Hello " + req.Name\n        return nil\n}\n\nfunc main() {\n        function := micro.NewFunction(\n                micro.Name("greeter"),\n                micro.Version("latest"),\n        )\n\n        function.Init()\n\n\t    function.Handle(new(Greeter))\n\n        if err := function.Run(); err != nil {\n                log.Fatal(err)\n        }\n}']],["p","需要注意的是，要保证服务发现机制运行起来，这样服务才能注册，其它服务或客户端才能发现它。快速启动可",["a",{title:null,href:"https://github.com/micro/go-micro#getting-started"},"参考"],"。"],["h2","编写客户端"],["p",["a",{title:null,href:"https://pkg.go.dev/github.com/micro/go-micro/v2/client"},"客户端"],"包用于查询服务，当创建服务时，也包含了一个客户端，这个客户端匹配服务所使用的初始化包。"],["p","查询上面的服务很简单："],["pre",{lang:"go",highlighted:'<span class="token comment" spellcheck="true">// 创建greate客户端，这需要传入服务名与服务的客户端方法构建的客户端对象</span>\ngreeter <span class="token operator">:=</span> proto<span class="token punctuation">.</span><span class="token function">NewGreeterClient</span><span class="token punctuation">(</span><span class="token string">"greeter"</span><span class="token punctuation">,</span> function<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment" spellcheck="true">// 在Greeter handler上请求调用Hello方法</span>\nrsp<span class="token punctuation">,</span> err <span class="token operator">:=</span> greeter<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>proto<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">{</span>\n\tName<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>rsp<span class="token punctuation">.</span>Greeter<span class="token punctuation">)</span>'},["code",'// 创建greate客户端，这需要传入服务名与服务的客户端方法构建的客户端对象\ngreeter := proto.NewGreeterClient("greeter", function.Client())\n\n// 在Greeter handler上请求调用Hello方法\nrsp, err := greeter.Hello(context.TODO(), &proto.HelloRequest{\n\tName: "John",\n})\nif err != nil {\n\tfmt.Println(err)\n\treturn\n}\n\nfmt.Println(rsp.Greeter)']],["p",["code","proto.NewGreeterClient"]," 需要 Function 名与客户端来请求服务。"],["p","完整例子可查看",["a",{title:null,href:"https://github.com/micro/examples/tree/master/function"},"go-micro/examples/function"],"."]],meta:{order:32,title:"编写Golang Function",filename:"docs/stack-rpc/writing-a-go-function.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#先写一个-Function",title:"先写一个 Function"},"先写一个 Function"]],["li",["a",{className:"bisheng-toc-h2",href:"#编写客户端",title:"编写客户端"},"编写客户端"]]]}}}]);