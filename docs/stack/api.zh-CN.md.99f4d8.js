(window.webpackJsonp=window.webpackJsonp||[]).push([[195],{3189:function(e,o){e.exports={content:["section",["p","Stack 定义了注册接口",["strong","Registry"],"，内置了轻量的局域网注册 MDNS，同时插件中支持常见的注册中心，比如 etcd、zookeeper、consul 等。下面给大家演示几种声明注册中心的方式"],["h2","概览"],["p",["strong","API"],"基于",["a",{title:null,href:"https://github.com/micro/go-micro"},"go-micro"],"开发，所以它天然具备服务发现、负载均衡、编码及 RPC 通信的能力，故而，",["strong","API"],"也是 go-micro 体系中的一个微服务，所以它自身也是可插拔的。"],["p","有兴趣的同学可以参考",["a",{title:null,href:"https://github.com/micro/go-plugins"},"go-plugins"],"，以了解对 micro 对 gRPC、kubernetes、etcd、nats 及 rabbitmq 等通用工具或组件的支持。"],["p","另外，",["strong","API"],"也使用了",["a",{title:null,href:"https://github.com/micro/go-api"},"go-api"],"，这样，它的接口 handler 处理器也是可以配置的。"],["h2","安装"],["pre",{lang:"shell",highlighted:'go get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>micro<span class="token operator">/</span>micro'},["code","go get -u github.com/micro/micro"]],["h2","运行"],["pre",{lang:"shell",highlighted:'# 默认的端口是<span class="token number">8080</span>\nmicro api'},["code","# 默认的端口是8080\nmicro api"]],["h2","使用 ACME 协议"],["p","ACME（ Automatic Certificate Management Environment）是由",["strong","Let's Encrypt"],"制定的安全协议。"],["pre",{lang:null,highlighted:'MICRO_ENABLE_ACME<span class="token operator">=</span><span class="token boolean">true</span> micro api'},["code","MICRO_ENABLE_ACME=true micro api"]],["p","可以选择是否配置白名单"],["pre",{lang:null,highlighted:'MICRO_ENABLE_ACME<span class="token operator">=</span><span class="token boolean">true</span> \\\nMICRO_ACME_HOSTS<span class="token operator">=</span>example<span class="token punctuation">.</span>com<span class="token punctuation">,</span>api<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com \\\nmicro api'},["code","MICRO_ENABLE_ACME=true \\\nMICRO_ACME_HOSTS=example.com,api.example.com \\\nmicro api"]],["h2","设置 TLS 证书"],["p","API 服务支持 TLS 证书"],["pre",{lang:"shell",highlighted:'MICRO_ENABLE_TLS<span class="token operator">=</span><span class="token boolean">true</span> \\\nMICRO_TLS_CERT_FILE<span class="token operator">=</span><span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>cert \\\nMICRO_TLS_KEY_FILE<span class="token operator">=</span><span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>key \\\nmicro api'},["code","MICRO_ENABLE_TLS=true \\\nMICRO_TLS_CERT_FILE=/path/to/cert \\\nMICRO_TLS_KEY_FILE=/path/to/key \\\nmicro api"]],["h2","设置命名空间"],["p","API 使用带分隔符的命名空间来在逻辑上区分后台服务及公开的服务。命名空间及 http 请求路径会用于解析服务名与方法，比如",["code","GET /foo HTTP/1.1"],"会被路由到",["code","go.micro.api.foo"],"服务上。"],["p","API 默认的命名空间是",["code","go.micro.api"],"，当然，也可以修改："],["pre",{lang:"shell",highlighted:'MICRO_NAMESPACE<span class="token operator">=</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>api micro api'},["code","MICRO_NAMESPACE=com.example.api micro api"]],["p","通过设置命名空间为为空禁用命名空间，不过以后会尝试用更好的方式实现。"],["pre",{lang:"shell",highlighted:'MICRO_NAMESPACE<span class="token operator">=</span><span class="token string">\' \'</span>'},["code","MICRO_NAMESPACE=' '"]],["h2","示例"],["p","我们演示一个 3 层的服务架构："],["ul",["li",["p",["code","micro api"],": (localhost:8080) - http 访问入口"]],["li",["p",["code","api service"],": (go.micro.api.greeter) - 对外暴露的 API 服务"]],["li",["p",["code","backend service"],": (go.micro.srv.greeter) - 内网的后台服务"]]],["p","完整示例可以参考：",["a",{title:null,href:"https://github.com/micro/examples/tree/master/greeter"},"examples/greeter"]],["h3","运行示例"],["pre",{lang:"shell",highlighted:'# 下载示例\ngit clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>micro<span class="token operator">/</span>examples\n\n# 运行服务\ngo run examples<span class="token operator">/</span>greeter<span class="token operator">/</span>srv<span class="token operator">/</span>main<span class="token punctuation">.</span>go\n\n# 运行api\ngo run examples<span class="token operator">/</span>greeter<span class="token operator">/</span>api<span class="token operator">/</span>api<span class="token punctuation">.</span>go\n\n# 启动micro api\nmicro api'},["code","# 下载示例\ngit clone https://github.com/micro/examples\n\n# 运行服务\ngo run examples/greeter/srv/main.go\n\n# 运行api\ngo run examples/greeter/api/api.go\n\n# 启动micro api\nmicro api"]],["h3","查询"],["p","向 micro api 发起 http 请求"],["pre",{lang:"shell",highlighted:'curl <span class="token string">"http://localhost:8080/greeter/say/hello?name=John"</span>'},["code",'curl "http://localhost:8080/greeter/say/hello?name=John"']],["p","HTTP 请求的路径",["code","/greeter/say/hello"],"会被路由到服务",["code","go.micro.api.greeter"],"的方法",["code","Say.Hello"],"上。"],["p","绕开 api 服务并且直接通过 rpc 调用："],["pre",{lang:"shell",highlighted:'curl <span class="token operator">-</span>d <span class="token string">\'service=go.micro.srv.greeter\'</span> \\\n     <span class="token operator">-</span>d <span class="token string">\'method=Say.Hello\'</span> \\\n     <span class="token operator">-</span>d <span class="token string">\'request={"name": "John"}\'</span> \\\n     http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>rpc'},["code","curl -d 'service=go.micro.srv.greeter' \\\n     -d 'method=Say.Hello' \\\n     -d 'request={\"name\": \"John\"}' \\\n     http://localhost:8080/rpc"]],["p","使用 JSON 的方式执行同一请求："],["pre",{lang:"shell",highlighted:'curl <span class="token operator">-</span>H <span class="token string">\'Content-Type: application/json\'</span> \\\n     <span class="token operator">-</span>d <span class="token string">\'{"service": "go.micro.srv.greeter", "method": "Say.Hello", "request": {"name": "John"}}\'</span> \\\n     http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>rpc'},["code",'curl -H \'Content-Type: application/json\' \\\n     -d \'{"service": "go.micro.srv.greeter", "method": "Say.Hello", "request": {"name": "John"}}\' \\\n     http://localhost:8080/rpc']]],meta:{order:3,title:"注册中心",filename:"docs/stack/api.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#概览",title:"概览"},"概览"]],["li",["a",{className:"bisheng-toc-h2",href:"#安装",title:"安装"},"安装"]],["li",["a",{className:"bisheng-toc-h2",href:"#运行",title:"运行"},"运行"]],["li",["a",{className:"bisheng-toc-h2",href:"#使用-ACME-协议",title:"使用 ACME 协议"},"使用 ACME 协议"]],["li",["a",{className:"bisheng-toc-h2",href:"#设置-TLS-证书",title:"设置 TLS 证书"},"设置 TLS 证书"]],["li",["a",{className:"bisheng-toc-h2",href:"#设置命名空间",title:"设置命名空间"},"设置命名空间"]],["li",["a",{className:"bisheng-toc-h2",href:"#示例",title:"示例"},"示例"]],["li",["a",{className:"bisheng-toc-h2",href:"#API",title:"API"},"API"]],["li",["a",{className:"bisheng-toc-h2",href:"#Handlers",title:"Handlers"},"Handlers"]],["li",["a",{className:"bisheng-toc-h2",href:"#Resolver",title:"Resolver"},"Resolver"]]],api:["section",["h2","API"],["p","micro api 提供下面类型的 http api 接口"],["pre",{lang:null,highlighted:'<span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">[</span>service<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">[</span>method<span class="token punctuation">]</span>\t# HTTP路径式的会被动态地定位到服务上\n<span class="token operator">-</span> <span class="token operator">/</span>rpc\t\t\t# 显式使用后台服务与方法名直接调用'},["code","- /[service]/[method]\t# HTTP路径式的会被动态地定位到服务上\n- /rpc\t\t\t# 显式使用后台服务与方法名直接调用"]],["p","请看下面的例子"],["h2","Handlers"],["p","Handler 负责持有并管理 HTTP 请求路由。"],["p",'默认的 handler 使用从注册中心获取的端口元数据来决定指向服务的路由，如果路由不匹配，就会回退到使用"rpc" hander。在注册时，可以通过',["a",{title:null,href:"https://github.com/micro/go-api"},"go-api"],"来配置路由。"],["p","API 有如下方法可以配置请求 handler："],["ul",["li",["p",["a",{title:null,href:"#api-handler"},["code","api"]]," - 负责把内部的 RPC 服务对外暴露成 http 接口，它接收并处理 http 请求，根据 URL 转成内部 RPC 请求，并把 RPC 服务的响应结果返回客户端。"]],["li",["p",["a",{title:null,href:"#rpc-handler"},["code","rpc"]]," - 处理 json 及 protobuf 格式的 POST 请求，并转向 RPC。"]],["li",["p",["a",{title:null,href:"#proxy-handler"},["code","proxy"]]," - 反向代理。"]],["li",["p",["a",{title:null,href:"#event-handler"},["code","event"]]," - 处理任意的 http 请求并向消息总线分发消息。"]],["li",["p",["a",{title:null,href:"#web-handler"},["code","web"]]," - \bhttp 反向代理，支持 websocket。"]]],["p","通过",["a",{title:null,href:"#rpc-endpoint"},["code","/rpc"]],"入口可以绕开 handler 处理器。"],["p","目前版本（V1）无法支持多个 handler 并存运行，也即同时只能使用一个 handler。"],["h3","API Handler"],["p","API 处理器接收任何的 HTTP 请求，并且向前转发指定格式的 RPC 请求。"],["ul",["li",["p","Content-Type: 支持任何类型"]],["li",["p","Body: 支持任何格式"]],["li",["p","Forward Format: 转发格式，",["a",{title:null,href:"https://github.com/micro/go-micro/blob/master/api/proto/api.proto#L11"},"api.Request"],"/",["a",{title:null,href:"https://github.com/micro/go-micro/blob/master/api/proto/api.proto#L21"},"api.Response"]]],["li",["p","Path: 请求路径，",["code","/[service]/[method]"]]],["li",["p","Resolver: 请求解析器，路径会被解析成服务与方法"]],["li",["p","Configure: 配置，在启动时指定",["code","--handler=api"],"或在启动命令前指定环境变量",["code","MICRO_API_HANDLER=api"]]]],["h3","RPC Handler"],["p","RPC 处理器接收 json 或 protobuf 格式的 HTTP POST 请求，然后向前转成 RPC 请求。"],["ul",["li",["p","Content-Type: ",["code","application/json"]," or ",["code","application/protobuf"]]],["li",["p","Body: JSON 或者 Protobuf"]],["li",["p","Forward Format: ",["strong","json-rpc"],"或者",["strong","proto-rpc"],"，与",["code","Content-Type"],"有关"]],["li",["p","Path: ",["code","/[service]/[method]"]]],["li",["p","Resolver: 请求解析器，路径会被解析成服务与方法"]],["li",["p","Configure: 配置，在启动时指定",["code","--handler=rpc"],"或在启动命令前指定环境变量",["code","MICRO_API_HANDLER=rpc"]]],["li",["p","如果没有设置时，RPC Handler 就是",["strong","默认"],"的 handler，"]]],["h3","Proxy Handler"],["p","代理 Handler 其实是内置在服务发现中的反向代理服务。"],["ul",["li",["p","Content-Type: 支持任何类型"]],["li",["p","Body: 支持任何格式"]],["li",["p","Forward Format: HTTP 反向代理"]],["li",["p","Path: ",["code","/[service]"]]],["li",["p","Resolver: 请求解析器，路径会被解析成服务名"]],["li",["p","Configure: 配置，在启动时指定",["code","--handler=proxy"],"或在启动命令前指定环境变量",["code","MICRO_API_HANDLER=proxy"]]],["li",["p","REST 风格的服务可以通过 API 代理，就像常见微服务一样对外提供相应的服务。"]]],["h3","Event Handler"],["p","事件处理器使用 go-micro 的 broker 代理接收 http 请求并把请求作为消息传到消息总线上。"],["ul",["li",["p","Content-Type: 支持任何类型"]],["li",["p","Body: 支持任何格式"]],["li",["p","Forward Format: 请求格式得是 ",["a",{title:null,href:"https://github.com/micro/go-api/blob/master/proto/api.proto#L28L39"},"go-api/proto.Event"]]],["li",["p","Path: 请求路径，",["code","/[topic]/[event]"]]],["li",["p","Resolver: 请求解析器，路径会被解析成 topic（主题，相当于事件分类）与事件（event）名。"]],["li",["p","Configure: 配置，在启动时指定",["code","--handler=event"],"或在启动命令前指定环境变量",["code","MICRO_API_HANDLER=event"]]]],["h3","Web Handler"],["p","Web 处理器，它是内置在服务发现中的 HTTP 反向代理服务，支持 web socket。"],["ul",["li",["p","Content-Type: 支持任何类型"]],["li",["p","Body: 支持任何格式"]],["li",["p","Forward Format: HTTP 反向代理，包括 web socket"]],["li",["p","Path: ",["code","/[service]"]]],["li",["p","Resolver: 请求解析器，路径会被解析成服务名"]],["li",["p","Configure: 配置，在启动时指定",["code","--handler=web"],"或在启动命令前指定环境变量",["code","MICRO_API_HANDLER=web"]]]],["h3","RPC endpoint"],["p",["strong","/rpc"],"端点允许绕过主 handler，然后与任何服务直接会话。"],["ul",["li",["p","请求参数"],["ul",["li",["p",["code","service"]," - 指定服务名"]],["li",["p",["code","method"]," - 指定方法名"]],["li",["p",["code","request"]," - 请求 body 体"]],["li",["p",["code","address"]," - 可选，指定特定的目标主机地址"]]]]],["p","示例："],["pre",{lang:null,highlighted:'curl <span class="token operator">-</span>d <span class="token string">\'service=go.micro.srv.greeter\'</span> \\\n     <span class="token operator">-</span>d <span class="token string">\'method=Say.Hello\'</span> \\\n     <span class="token operator">-</span>d <span class="token string">\'request={"name": "Bob"}\'</span> \\\n     http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>rpc'},["code","curl -d 'service=go.micro.srv.greeter' \\\n     -d 'method=Say.Hello' \\\n     -d 'request={\"name\": \"Bob\"}' \\\n     http://localhost:8080/rpc"]],["p","更多信息查看可运行的示例：",["a",{title:null,href:"https://github.com/micro/examples/tree/master/api"},"github.com/micro/examples/api"]],["h2","Resolver"],["p","解析器，Micro 使用命名空间与 HTTP 请求路径来动态路由到具体的服务。"],["p","API 命名的空间是",["code","go.micro.api"],"。可以通过指令",["code","--namespace"],"或者环境变量",["code","MICRO_NAMESPACE="],"设置命名空间。"],["p","下面说一下解析器是如何使用的："],["h3","RPC Resolver"],["p","RPC 解析器示例中的 RPC 服务有名称与方法，分别是",["code","go.micro.api.greeter"],"，",["code","Greeter.Hello"],"。"],["p","URL 会被解析成以下几部分："],["table",["thead",["tr",["th","路径"],["th","服务"],["th","方法"]]],["tbody",["tr",["td","/foo/bar"],["td","go.micro.api.foo"],["td","Foo.Bar"]],["tr",["td","/foo/bar/baz"],["td","go.micro.api.foo"],["td","Bar.Baz"]],["tr",["td","/foo/bar/baz/cat"],["td","go.micro.api.foo.bar"],["td","Baz.Cat"]]]],["p","带版本号的 API URL 也可以很容易定位到具体的服务："],["table",["thead",["tr",["th","Path"],["th","Service"],["th","Method"]]],["tbody",["tr",["td","/foo/bar"],["td","go.micro.api.foo"],["td","Foo.Bar"]],["tr",["td","/v1/foo/bar"],["td","go.micro.api.v1.foo"],["td","Foo.Bar"]],["tr",["td","/v1/foo/bar/baz"],["td","go.micro.api.v1.foo"],["td","Bar.Baz"]],["tr",["td","/v2/foo/bar"],["td","go.micro.api.v2.foo"],["td","Foo.Bar"]],["tr",["td","/v2/foo/bar/baz"],["td","go.micro.api.v2.foo"],["td","Bar.Baz"]]]],["h3","Proxy Resolver"],["p","代理解析器只处理服务名，所以处理方案和 RPC 解析器有点不太一样。"],["p","URL 会被解析成以下几部分："],["table",["thead",["tr",["th","路径"],["th","服务"],["th","方法"]]],["tbody",["tr",["td","/foo"],["td","go.micro.api.foo"],["td","/foo"]],["tr",["td","/foo/bar"],["td","go.micro.api.foo"],["td","/foo/bar"]],["tr",["td","/greeter"],["td","go.micro.api.greeter"],["td","/greeter"]],["tr",["td","/greeter/:name"],["td","go.micro.api.greeter"],["td","/greeter/:name"]]]]]}}}]);