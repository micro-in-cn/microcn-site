(window.webpackJsonp=window.webpackJsonp||[]).push([[209],{3203:function(n,s){n.exports={content:["article",["p","Stack 中的定义了轻量的日志 Logger 接口。"],["h2","设置级别"],["p","日志级别目前支持在环境变量、配置文件中设置"],["ul",["li",["p","硬编码"]],["li",["p","配置文件"]],["li",["p","环境变量"]],["li",["p","启动参数"]]],["p","四个配置方式的优先级大小为：启动参数>环境变量>配置文件>硬编码"],["h2","硬编码"],["p","硬编码也即在代码中直接声明日志级别："],["pre",{lang:null,highlighted:'log<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">WithLevel</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>DebugLevel<span class="token punctuation">)</span><span class="token punctuation">)</span>'},["code","log.Init(log.WithLevel(log.DebugLevel))"]],["p","示例：",["a",{title:null,href:"https://github.com/stack-labs/stack/blob/master/examples/logger/level/hardcode"},"HardcodeLevel"]],["h2","配置文件"],["blockquote",["p","实现中"]],["p","在应用启动的目录中如果有",["strong","resources"],"目录，则会主动加载该目录的",["strong","stack.yml"],"配置文件"],["p",["strong","resources/stack.yml"]],["pre",{lang:"yaml",highlighted:'<span class="token key atrule">stack</span><span class="token punctuation">:</span>\n  <span class="token key atrule">logger</span><span class="token punctuation">:</span>\n    <span class="token key atrule">level</span><span class="token punctuation">:</span> debug'},["code","stack:\n  logger:\n    level: debug"]],["p","示例：",["a",{title:null,href:"https://github.com/stack-labs/stack/blob/master/examples/logger/level/configfile"},"ConfigFileLevel"]],["h2","环境变量"],["p","可以通过环境变量",["strong","STACK_LOG_LEVEL"],"定义日志级别："],["pre",{lang:"bash",highlighted:'STACK_LOG_LEVEL<span class="token operator">=</span>debug go run main.go'},["code","STACK_LOG_LEVEL=debug go run main.go"]],["h2","启动参数"],["p","参数注入也是级别最高的，可以自行初始化日志时传入级别，设置为业务需要初始默认的级别"],["pre",{lang:null,highlighted:'go run main<span class="token punctuation">.</span>go <span class="token operator">-</span><span class="token operator">-</span>logger_level<span class="token operator">=</span>debug'},["code","go run main.go --logger_level=debug"]],["h2","动态级别"],["p","有时候我们需要在运行时改变日志级别，此时我们可以调用",["strong","Init"],"方法覆盖原有配置"],["pre",{lang:"bash",highlighted:'<span class="token function">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"github.com/stack-labs/stack/logger"</span>\n<span class="token punctuation">)</span>\n\nfunc main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tlogger.Init<span class="token punctuation">(</span>logger.WithLevel<span class="token punctuation">(</span>logger.DebugLevel<span class="token punctuation">))</span>\n\tlogger.Debug<span class="token punctuation">(</span><span class="token string">"hello，这是Debug级别"</span><span class="token punctuation">)</span>\n\n    // 修改级别\n\tlogger.Init<span class="token punctuation">(</span>logger.WithLevel<span class="token punctuation">(</span>logger.InfoLevel<span class="token punctuation">))</span>\n\n\tlogger.Debug<span class="token punctuation">(</span><span class="token string">"hello，这是Debug级别"</span><span class="token punctuation">)</span>\n\tlogger.Info<span class="token punctuation">(</span><span class="token string">"hello，这是Info级别"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'import (\n\t"github.com/stack-labs/stack/logger"\n)\n\nfunc main() {\n\tlogger.Init(logger.WithLevel(logger.DebugLevel))\n\tlogger.Debug("hello，这是Debug级别")\n\n    // 修改级别\n\tlogger.Init(logger.WithLevel(logger.InfoLevel))\n\n\tlogger.Debug("hello，这是Debug级别")\n\tlogger.Info("hello，这是Info级别")\n}']],["p","示例：",["a",{title:null,href:"https://github.com/stack-labs/stack/blob/master/examples/logger/level/hardcode"},"DynamicLevel"]],["h2","固有字段"],["p","我们在日志打印时，有时候需要在每次打印都把固有的信息打印出来，比如当前机器 IP 等等，此时可以通过 WithFields 声明在当前上下文中："],["ul",["li",["p","全局"]]],["pre",{lang:"go",highlighted:'<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tlogger<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">WithFields</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>\n\t\t<span class="token string">"header1"</span><span class="token punctuation">:</span> <span class="token string">"头1"</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\tlogger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"hello，这条日志带有固定字段"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'func main() {\n\tlogger.Init(logger.WithFields(map[string]interface{}{\n\t\t"header1": "头1",\n\t}))\n\n\tlogger.Info("hello，这条日志带有固定字段")\n}']],["pre",{lang:"shell",highlighted:'<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">32</span>  file<span class="token operator">=</span>fields<span class="token operator">/</span>fields<span class="token punctuation">.</span>go<span class="token punctuation">:</span><span class="token number">10</span> header1<span class="token operator">=</span>头<span class="token number">1</span> level<span class="token operator">=</span>info hello，这条日志带有固定字段'},["code","2020-12-18 00:06:32  file=fields/fields.go:10 header1=头1 level=info hello，这条日志带有固定字段"]],["p","示例：",["a",{title:null,href:"https://github.com/stack-labs/stack/blob/master/examples/logger/fields"},"Fields"]],["h2","持久化"],["p","默认的日志输是标准输入输出(stdout)，所以是不会落盘到文件系统的，只会在控制台打印出来，如果我们需要将日志落盘持久化，那需要通过插件库中的日志插件来完成。"],["p","Stack 提供了日志持久化规范参数",["a",{title:null,href:"https://github.com/stack-labs/stack/blob/master/logger/options.go#L8"},"PersistenceOptions"]," ："],["pre",{lang:"go",highlighted:'log<span class="token punctuation">.</span><span class="token function">Persistence</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>log<span class="token punctuation">.</span>PersistenceOptions<span class="token punctuation">{</span>\n\tEnable<span class="token punctuation">:</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 是否启动持久化</span>\n\tMaxFileSize<span class="token punctuation">:</span>           <span class="token number">10</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 文件大小上限，单位：M</span>\n\tMaxBackupSize<span class="token punctuation">:</span>         <span class="token number">500</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 文件备份目录大小上限，单位：M</span>\n\tMaxBackupKeepDays<span class="token punctuation">:</span>     <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 文件储存最大期限，单位：天</span>\n\tFileNamePattern<span class="token punctuation">:</span>       <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 文件名自定义模板，暂未实现</span>\n\tBackupFileNamePattern<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 备份名自定义模板，暂未实现</span>\n\tDir<span class="token punctuation">:</span>                   <span class="token string">"/tmp/logs"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 日志存储目录</span>\n\tBackupDir<span class="token punctuation">:</span>             <span class="token string">"/tmp/logs/backup"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 日志备份存储目录</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>'},["code",'log.Persistence(&log.PersistenceOptions{\n\tEnable:                true,   // 是否启动持久化\n\tMaxFileSize:           10,     // 文件大小上限，单位：M\n\tMaxBackupSize:         500,    // 文件备份目录大小上限，单位：M\n\tMaxBackupKeepDays:     1,      // 文件储存最大期限，单位：天\n\tFileNamePattern:       "",     // 文件名自定义模板，暂未实现\n\tBackupFileNamePattern: "",     // 备份名自定义模板，暂未实现\n\tDir:                   "/tmp/logs",  // 日志存储目录\n\tBackupDir:             "/tmp/logs/backup",  // 日志备份存储目录\n}),']],["blockquote",["p","注：目前只支持 Logrus 插件。"]],["h2","插件"],["p","StackRPC 提供了常见的日志库集成实现"],["ul",["li",["p",["a",{title:null,href:"https://github.com/stack-labs/stack/blob/master/plugin/logger/zap"},"zap"]," 研发中"]],["li",["p",["a",{title:null,href:"https://github.com/stack-labs/stack/blob/master/plugin/logger/logrus"},"logrus"]]]],["h2","Logurs"],["p","下面的示例演示了如何使用 ",["a",{title:null,href:"https://github.com/stack-labs/stack/blob/master/plugin/logger/logrus"},"logrus"]," 来覆盖默认的实现："],["pre",{lang:"go",highlighted:'<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tservice <span class="token operator">:=</span> stack<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\t\tstack<span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span>logrus<span class="token punctuation">.</span><span class="token function">NewLogger</span><span class="token punctuation">(</span>\n\t\t\tlog<span class="token punctuation">.</span><span class="token function">WithLevel</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>TraceLevel<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\tlog<span class="token punctuation">.</span><span class="token function">Persistence</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>log<span class="token punctuation">.</span>PersistenceOptions<span class="token punctuation">{</span>\n\t\t\t\tEnable<span class="token punctuation">:</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t\t\tMaxFileSize<span class="token punctuation">:</span>           <span class="token number">10</span><span class="token punctuation">,</span>\n\t\t\t\tMaxBackupSize<span class="token punctuation">:</span>         <span class="token number">500</span><span class="token punctuation">,</span>\n\t\t\t\tMaxBackupKeepDays<span class="token punctuation">:</span>     <span class="token number">1</span><span class="token punctuation">,</span>\n\t\t\t\tFileNamePattern<span class="token punctuation">:</span>       <span class="token string">""</span><span class="token punctuation">,</span>\n\t\t\t\tBackupFileNamePattern<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n\t\t\t\tDir<span class="token punctuation">:</span>                   <span class="token string">"/tmp/logs"</span><span class="token punctuation">,</span>\n\t\t\t\tBackupDir<span class="token punctuation">:</span>             <span class="token string">"/tmp/logs/backup"</span><span class="token punctuation">,</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\t<span class="token comment" spellcheck="true">// 将不同级别切成不同文件存储</span>\n\t\t\tlogrus<span class="token punctuation">.</span><span class="token function">SplitLevel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'func main() {\n\tservice := stack.NewService(\n\t\tstack.Logger(logrus.NewLogger(\n\t\t\tlog.WithLevel(log.TraceLevel),\n\t\t\tlog.Persistence(&log.PersistenceOptions{\n\t\t\t\tEnable:                true,\n\t\t\t\tMaxFileSize:           10,\n\t\t\t\tMaxBackupSize:         500,\n\t\t\t\tMaxBackupKeepDays:     1,\n\t\t\t\tFileNamePattern:       "",\n\t\t\t\tBackupFileNamePattern: "",\n\t\t\t\tDir:                   "/tmp/logs",\n\t\t\t\tBackupDir:             "/tmp/logs/backup",\n\t\t\t}),\n\t\t\t// 将不同级别切成不同文件存储\n\t\t\tlogrus.SplitLevel(true),\n\t\t)))\n\n\tservice.Init()\n\tservice.Run()\n}']],["p","示例：",["a",{title:null,href:"https://github.com/stack-labs/stack/blob/master/examples/logger/logrus"},"Logrus"]],["h3","未完待续"]],meta:{order:12,title:"Logger",filename:"docs/stack/logger.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#设置级别",title:"设置级别"},"设置级别"]],["li",["a",{className:"bisheng-toc-h2",href:"#硬编码",title:"硬编码"},"硬编码"]],["li",["a",{className:"bisheng-toc-h2",href:"#配置文件",title:"配置文件"},"配置文件"]],["li",["a",{className:"bisheng-toc-h2",href:"#环境变量",title:"环境变量"},"环境变量"]],["li",["a",{className:"bisheng-toc-h2",href:"#启动参数",title:"启动参数"},"启动参数"]],["li",["a",{className:"bisheng-toc-h2",href:"#动态级别",title:"动态级别"},"动态级别"]],["li",["a",{className:"bisheng-toc-h2",href:"#固有字段",title:"固有字段"},"固有字段"]],["li",["a",{className:"bisheng-toc-h2",href:"#持久化",title:"持久化"},"持久化"]],["li",["a",{className:"bisheng-toc-h2",href:"#插件",title:"插件"},"插件"]],["li",["a",{className:"bisheng-toc-h2",href:"#Logurs",title:"Logurs"},"Logurs"]]]}}}]);