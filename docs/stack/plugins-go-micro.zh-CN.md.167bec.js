(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{3204:function(n,s){n.exports={content:["article",["p","Micro 是可插拔的工具库与框架，在",["a",{title:null,href:"https://github.com/micro/go-plugins"},"go-plugins"],"中您可以随意根据需要替换需要的插件。"],["p","micro 工具集有独立的插件接口，查看",["a",{title:null,href:"https://github.com/micro/micro/tree/master/plugin"},"micro/plugin"],"了解更多。"],["p","下面是 go-micro 插件使用方式。"],["h2","使用方式"],["p","go-micro 中插件可以通过下面几种方式使用，可以通过命令行参数或者环境变量。"],["p","在 Golang 中引用插件代码，然后调用",["code","service.Init"],"方法就会解析命令行、环境变量。"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"github.com/micro/go-micro/v2"</span>\n\t<span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/broker/rabbitmq"</span>\n\t<span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/registry/kubernetes"</span>\n\t<span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/transport/nats"</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tservice <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\t\t<span class="token comment" spellcheck="true">// Set service name</span>\n\t\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"my.service"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n\n\t<span class="token comment" spellcheck="true">// Parse CLI flags</span>\n\tservice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'import (\n\t"github.com/micro/go-micro/v2"\n\t_ "github.com/micro/go-plugins/broker/rabbitmq"\n\t_ "github.com/micro/go-plugins/registry/kubernetes"\n\t_ "github.com/micro/go-plugins/transport/nats"\n)\n\nfunc main() {\n\tservice := micro.NewService(\n\t\t// Set service name\n\t\tmicro.Name("my.service"),\n\t)\n\n\t// Parse CLI flags\n\tservice.Init()\n}']],["h3","参数标识"],["p","您可以像下面这样声明参数标记："],["pre",{lang:"shell",highlighted:'go run service<span class="token punctuation">.</span>go <span class="token operator">-</span><span class="token operator">-</span>broker<span class="token operator">=</span>rabbitmq <span class="token operator">-</span><span class="token operator">-</span>registry<span class="token operator">=</span>kubernetes <span class="token operator">-</span><span class="token operator">-</span>transport<span class="token operator">=</span>nats'},["code","go run service.go --broker=rabbitmq --registry=kubernetes --transport=nats"]],["h3","环境变量"],["p","在启动应用前声明环境变量："],["pre",{lang:null,highlighted:'MICRO_BROKER<span class="token operator">=</span>rabbitmq \\\nMICRO_REGISTRY<span class="token operator">=</span>kubernetes \\\nMICRO_TRANSPORT<span class="token operator">=</span>nats \\\ngo run service<span class="token punctuation">.</span>go'},["code","MICRO_BROKER=rabbitmq \\\nMICRO_REGISTRY=kubernetes \\\nMICRO_TRANSPORT=nats \\\ngo run service.go"]],["h3","其它选项"],["p","在创建新服务前引入并设置选项："],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">"github.com/micro/go-micro/v2"</span>\n\t<span class="token string">"github.com/micro/go-plugins/registry/kubernetes"</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tregistry <span class="token operator">:=</span> kubernetes<span class="token punctuation">.</span><span class="token function">NewRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a default to using env vars for master API</span>\n\n\tservice <span class="token operator">:=</span> micro<span class="token punctuation">.</span><span class="token function">NewService</span><span class="token punctuation">(</span>\n\t\t<span class="token comment" spellcheck="true">// Set service name</span>\n\t\tmicro<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">"my.service"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t<span class="token comment" spellcheck="true">// Set service registry</span>\n\t\tmicro<span class="token punctuation">.</span><span class="token function">Registry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code",'import (\n\t"github.com/micro/go-micro/v2"\n\t"github.com/micro/go-plugins/registry/kubernetes"\n)\n\nfunc main() {\n\tregistry := kubernetes.NewRegistry() // a default to using env vars for master API\n\n\tservice := micro.NewService(\n\t\t// Set service name\n\t\tmicro.Name("my.service"),\n\t\t// Set service registry\n\t\tmicro.Registry(registry),\n\t)\n}']],["h2","构建"],["p","不提倡直接在",["code","main.go"],"文件中加入插件代码这种反模式的方式，推荐创建新的插件文件来引用插件。这样就可以自动构建插件并且插件与主逻辑分离。"],["p","创建新的文件，plugins.go，并引入需要的插件"],["pre",{lang:"go",highlighted:'<span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/broker/rabbitmq"</span>\n\t<span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/registry/kubernetes"</span>\n\t<span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/transport/nats"</span>\n<span class="token punctuation">)</span>'},["code",'package main\n\nimport (\n\t_ "github.com/micro/go-plugins/broker/rabbitmq"\n\t_ "github.com/micro/go-plugins/registry/kubernetes"\n\t_ "github.com/micro/go-plugins/transport/nats"\n)']],["p","重新带上 plugins.go 构建成二进制文件"],["pre",{lang:"shell",highlighted:'go build <span class="token operator">-</span>o service main<span class="token punctuation">.</span>go plugins<span class="token punctuation">.</span>go'},["code","go build -o service main.go plugins.go"]],["p","然后在启动时声明环境变量，变量会被加入的插件识别并使用"],["pre",{lang:"shell",highlighted:'MICRO_BROKER<span class="token operator">=</span>rabbitmq \\\nMICRO_REGISTRY<span class="token operator">=</span>kubernetes \\\nMICRO_TRANSPORT<span class="token operator">=</span>nats \\\nservice'},["code","MICRO_BROKER=rabbitmq \\\nMICRO_REGISTRY=kubernetes \\\nMICRO_TRANSPORT=nats \\\nservice"]],["h2","重新构建工具"],["p","如果想集成插件，那您只需要把插件引入单独的文件中，然后重新构建即可。"],["p","创建 plugins.go，引入插件"],["pre",{lang:"go",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">(</span>\n        <span class="token comment" spellcheck="true">// etcd v3 registry</span>\n        <span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/registry/etcdv3"</span>\n        <span class="token comment" spellcheck="true">// nats transport</span>\n        <span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/transport/nats"</span>\n        <span class="token comment" spellcheck="true">// kafka broker</span>\n        <span class="token boolean">_</span> <span class="token string">"github.com/micro/go-plugins/broker/kafka"</span>\n<span class="token punctuation">)</span>'},["code",'import (\n        // etcd v3 registry\n        _ "github.com/micro/go-plugins/registry/etcdv3"\n        // nats transport\n        _ "github.com/micro/go-plugins/transport/nats"\n        // kafka broker\n        _ "github.com/micro/go-plugins/broker/kafka"\n)']],["p","构建二进制文件"],["pre",{lang:"shell",highlighted:'<span class="token operator">/</span><span class="token operator">/</span> 本地使用\ngo build <span class="token operator">-</span>i <span class="token operator">-</span>o micro <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>go <span class="token punctuation">.</span><span class="token operator">/</span>plugins<span class="token punctuation">.</span>go\n\n<span class="token operator">/</span><span class="token operator">/</span> docker镜像\nCGO_ENABLED<span class="token operator">=</span><span class="token number">0</span> GOOS<span class="token operator">=</span>linux go build <span class="token operator">-</span>a <span class="token operator">-</span>installsuffix cgo <span class="token operator">-</span>ldflags <span class="token string">\'-w\'</span> <span class="token operator">-</span>i <span class="token operator">-</span>o micro <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>go <span class="token punctuation">.</span><span class="token operator">/</span>plugins<span class="token punctuation">.</span>go'},["code","// 本地使用\ngo build -i -o micro ./main.go ./plugins.go\n\n// docker镜像\nCGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-w' -i -o micro ./main.go ./plugins.go"]],["p","使用插件"],["pre",{lang:"shell",highlighted:'micro <span class="token operator">-</span><span class="token operator">-</span>registry<span class="token operator">=</span>etcdv3 <span class="token operator">-</span><span class="token operator">-</span>transport<span class="token operator">=</span>nats <span class="token operator">-</span><span class="token operator">-</span>broker<span class="token operator">=</span>kafka'},["code","micro --registry=etcdv3 --transport=nats --broker=kafka"]],["h2","源码仓库"],["p","go-micro 插件集可以在",["a",{title:null,href:"https://github.com/micro/go-plugins"},"github.com/micro/go-plugins"],"中找到。"]],meta:{order:37,title:"Go Micro插件",filename:"docs/stack/plugins-go-micro.zh-CN.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#使用方式",title:"使用方式"},"使用方式"]],["li",["a",{className:"bisheng-toc-h2",href:"#构建",title:"构建"},"构建"]],["li",["a",{className:"bisheng-toc-h2",href:"#重新构建工具",title:"重新构建工具"},"重新构建工具"]],["li",["a",{className:"bisheng-toc-h2",href:"#源码仓库",title:"源码仓库"},"源码仓库"]]]}}}]);